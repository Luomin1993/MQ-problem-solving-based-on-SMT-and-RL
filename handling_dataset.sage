#!/usr/bin/env python
# -*- coding: utf-8 -*-

__ENV__  =  'sage';
__author__ =  'hanss401';

import numpy as np;
import os;
import sys;
import itertools;

RING = GF(2)['z1,z2,z3,z4,z5,z6,z7,z8,z9,z10,z11,z12,z13,z14,z15,z16,z17,z18,z19,z20,z21,z22,z23,z24,z25,z26,z27,z28,z29,z30,z31,y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90,c91,c92,c93,c94,c95,c96,c97,c98,c99,c100,c101,c102,c103,c104,c105,c106,c107,c108,c109,c110,c111,c112,c113,c114,c115,c116,c117,c118,c119,c120,c121,c122,c123,c124,c125,c126,c127,c128,c129,c130,c131,c132,c133,c134,c135,c136,c137,c138,c139,c140,c141,c142,c143,c144,c145,c146,c147,c148,c149,c150,c151,c152,c153,c154,c155,c156,c157,c158,c159,c160,c161,c162,c163,c164,c165,c166,c167,c168,c169,c170,c171,c172,c173,c174,c175,c176,c177,c178,c179,c180,c181,c182,c183,c184,c185,c186,c187,c188,c189,c190,c191,c192,c193,c194,c195,c196,c197,c198,c199,c200,c201,c202,c203,c204,c205,c206,c207,c208,c209,c210,c211,c212,c213,c214,c215,c216,c217,c218,c219,c220,c221,c222,c223,c224,c225,c226,c227,c228,c229,c230,c231,c232,c233,c234,c235,c236,c237,c238,c239,c240,c241,c242,c243,c244,c245,c246,c247,c248,c249,c250,c251,c252,c253,c254,c255,c256,c257,c258,c259,c260,c261,c262,c263,c264,c265,c266,c267,c268,c269,c270,c271,c272,c273,c274,c275,c276,c277,c278,c279,c280,c281,c282,c283,c284,c285,c286,c287,c288,c289,c290,c291,c292,c293,c294,c295,c296,c297,c298,c299,c300,c301,c302,c303,c304,c305,c306,c307,c308,c309,c310,c311,c312,c313,c314,c315,c316,c317,c318,c319,c320,c321,c322,c323,c324,c325,c326,c327,c328,c329,c330,c331,c332,c333,c334,c335,c336,c337,c338,c339,c340,c341,c342,c343,c344,c345,c346,c347,c348,c349,c350,c351,c352,c353,c354,c355,c356,c357,c358,c359,c360,c361,c362,c363,c364,c365,c366,c367,c368,c369,c370,c371,c372,c373,c374,c375,c376,c377,c378,c379,c380,c381,c382,c383,c384,c385,c386,c387,c388,c389,c390,c391,c392,c393,c394,c395,c396,c397,c398,c399,c400,c401,c402,c403,c404,c405,c406,c407,c408,c409,c410,c411,c412,c413,c414,c415,c416,c417,c418,c419,c420,c421,c422,c423,c424,c425,c426,c427,c428,c429,c430,c431,c432,c433,c434,c435,c436,c437,c438,c439,c440,c441,c442,c443,c444,c445,c446,c447,c448,c449,c450,c451,c452,c453,c454,c455,c456,c457,c458,c459,c460,c461,c462,c463,c464,c465,c466,c467,c468,c469,c470,c471,c472,c473,c474,c475,c476,c477,c478,c479,c480,c481,c482,c483,c484,c485,c486,c487,c488,c489,c490,c491,c492,c493,c494,c495,c496,c497,c498,c499,c500,c501,c502,c503,c504,c505,c506,c507,c508,c509,c510,c511,c512,c513,c514,c515,c516,c517,c518,c519,c520,c521,c522,c523,c524,c525,c526,c527,c528,c529,c530,c531,c532,c533,c534,c535,c536,c537,c538,c539,c540,c541,c542,c543,c544,c545,c546,c547,c548,c549,c550,c551,c552,c553,c554,c555,c556,c557,c558,c559,c560,c561,c562,c563,c564,c565,c566,c567,c568,c569,c570,c571,c572,c573,c574,c575,c576,c577,c578,c579,c580,c581,c582,c583,c584,c585,c586,c587,c588,c589,c590,c591,c592,c593,c594,c595,c596,c597,c598,c599,c600,c601,c602,c603,c604,c605,c606,c607,c608,c609,c610,c611,c612,c613,c614,c615,c616,c617,c618,c619,c620,c621,c622,c623,c624,c625,c626,c627,c628,c629,c630,c631,c632,c633,c634,c635,c636,c637,c638,c639,c640,c641,c642,c643,c644,c645,c646,c647,c648,c649,c650,c651,c652,c653,c654,c655,c656,c657,c658,c659,c660,c661,c662,c663,c664,c665,c666,c667,c668,c669,c670,c671,c672,c673,c674,c675,c676,c677,c678,c679,c680,c681,c682,c683,c684,c685,c686,c687,c688,c689,c690,c691,c692,c693,c694,c695,c696,c697,c698,c699,c700,c701,c702,c703,c704,c705,c706,c707,c708,c709,c710,c711,c712,c713,c714,c715,c716,c717,c718,c719,c720,c721,c722,c723,c724,c725,c726,c727,c728,c729,c730,c731,c732,c733,c734,c735,c736,c737,c738,c739,c740,c741,c742,c743,c744,c745,c746,c747,c748,c749,c750,c751,c752,c753,c754,c755,c756,c757,c758,c759,c760,c761,c762,c763,c764,c765,c766,c767,c768,c769,c770,c771,c772,c773,c774,c775,c776,c777,c778,c779,c780,c781,c782,c783,c784,c785,c786,c787,c788,c789,c790,c791,c792,c793,c794,c795,c796,c797,c798,c799,c800,c801,c802,c803,c804,c805,c806,c807,c808,c809,c810,c811,c812,c813,c814,c815,c816,c817,c818,c819,c820,c821,c822,c823,c824,c825,c826,c827,c828,c829,c830,c831,c832,c833,c834,c835,c836,c837,c838,c839,c840,c841,c842,c843,c844,c845,c846,c847,c848,c849,c850,c851,c852,c853,c854,c855,c856,c857,c858,c859,c860,c861,c862,c863,c864,c865,c866,c867,c868,c869,c870,c871,c872,c873,c874,c875,c876,c877,c878,c879,c880,c881,c882,c883,c884,c885,c886,c887,c888,c889,c890,c891,c892,c893,c894,c895,c896,c897,c898,c899,c900,c901,c902,c903,c904,c905,c906,c907,c908,c909,c910,c911,c912,c913,c914,c915,c916,c917,c918,c919,c920,c921,c922,c923,c924,c925,c926,c927,c928,c929,c930,c931,c932,c933,c934,c935,c936,c937,c938,c939,c940,c941,c942,c943,c944,c945,c946,c947,c948,c949,c950,c951,c952,c953,c954,c955,c956,c957,c958,c959,c960,c961,c962,c963,c964,c965,c966,c967,c968,c969,c970,c971,c972,c973,c974,c975,c976,c977,c978,c979,c980,c981,c982,c983,c984,c985,c986,c987,c988,c989,c990,c991,c992,c993,c994,c995,c996,c997,c998,c999,c1000,c1001,c1002,c1003,c1004,c1005,c1006,c1007,c1008,c1009,c1010,c1011,c1012,c1013,c1014,c1015,c1016,c1017,c1018,c1019,c1020,c1021,c1022,c1023,c1024,c1025,c1026,c1027,c1028,c1029,c1030,c1031,c1032,c1033,c1034,c1035,c1036,c1037,c1038,c1039,c1040,c1041,c1042,c1043,c1044,c1045,c1046,c1047,c1048,c1049,c1050,c1051,c1052,c1053,c1054,c1055,c1056,c1057,c1058,c1059,c1060,c1061,c1062,c1063,c1064,c1065,c1066,c1067,c1068,c1069,c1070,c1071,c1072,c1073,c1074,c1075,c1076,c1077,c1078,c1079,c1080,c1081,c1082,c1083,c1084,c1085,c1086,c1087,c1088,c1089,c1090,c1091,c1092,c1093,c1094,c1095,c1096,c1097,c1098,c1099,c1100,c1101,c1102,c1103,c1104,c1105,c1106,c1107,c1108,c1109,c1110,c1111,c1112,c1113,c1114,c1115,c1116,c1117,c1118,c1119,c1120,c1121,c1122,c1123,c1124,c1125,c1126,c1127,c1128,c1129,c1130,c1131,c1132,c1133,c1134,c1135,c1136,c1137,c1138,c1139,c1140,c1141,c1142,c1143,c1144,c1145,c1146,c1147,c1148,c1149,c1150,c1151,c1152,c1153,c1154,c1155,c1156,c1157,c1158,c1159,c1160,c1161,c1162,c1163,c1164,c1165,c1166,c1167,c1168,c1169,c1170,c1171,c1172,c1173,c1174,c1175,c1176,c1177,c1178,c1179,c1180,c1181,c1182,c1183,c1184,c1185,c1186,c1187,c1188,c1189,c1190,c1191,c1192,c1193,c1194,c1195,c1196,c1197,c1198,c1199,c1200,k1,k2,k3,k4,k5,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,v1,v2,v3,v4,v5,a0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,t33,t34,t35,t36,t37,t38,t39,t40,z32,z33,z34,z35,z36,z37,z38,z39,z40,z41,z42,z43,z44,z45,z46,z47,z48,z49,z50,z51,z52,z53,z54,z55,z56,z57,z58,z59,z60,z61,z62,z63,z64,z65,z66,z67,z68,z69,z70,z71,z72,z73,z74,z75,z76,z77,z78,z79,z80,z81,z82,z83,z84,z85,z86,z87,z88,z89,z90,z91,z92,z93,z94,z95,z96,z97,z98,z99,z100,z101,z102,z103,z104,z105,z106,z107,z108,z109,z110,z111,z112,z113,z114,z115,z116,z117,z118,z119,z120,z121,z122,z123,z124,z125,z126,z127,z128,z129,z130,z131,z132,z133,z134,z135,z136,z137,z138,z139,z140,z141,z142,z143,z144,z145,z146,z147,z148,z149,z150,z151,z152,z153,z154,z155,z156,z157,z158,z159,z160,z161,z162,z163,z164,z165,z166,z167,z168,z169,z170,z171,z172,z173,z174,z175,z176,z177,z178,z179,z180,z181,z182,z183,z184,z185,z186,z187,z188,z189,z190,z191,z192,z193,z194,z195,z196,z197,z198,z199,z200,z201,z202,z203,z204,z205,z206,z207,z208,z209,z210,z211,z212,z213,z214,z215,z216,z217,z218,z219,z220,z221,z222,z223,z224,z225,z226,z227,z228,z229,z230,z231,z232,z233,z234,z235,z236,z237,z238,z239,z240,z241,z242,z243,z244,z245,z246,z247,z248,z249,z250,z251,z252,z253,z254,z255,z256,z257,z258,z259,z260,z261,z262,z263,z264,z265,z266,z267,z268,z269,z270,z271,z272,z273,z274,z275,z276,z277,z278,z279,z280,z281,z282,z283,z284,z285,z286,z287,z288,z289,z290,z291,z292,z293,z294,z295,z296,z297,z298,z299,z300,z301,z302,z303,z304,z305,z306,z307,z308,z309,z310,z311,z312,z313,z314,z315,z316,z317,z318,z319,z320,z321,z322,z323,z324,z325,z326,z327,z328,z329,z330,z331,z332,z333,z334,z335,z336,z337,z338,z339,z340,z341,z342,z343,z344,z345,z346,z347,z348,z349,z350,z351,z352,z353,z354,z355,z356,z357,z358,z359,z360,z361,z362,z363,z364,z365,z366,z367,z368,z369,z370,z371,z372,z373,z374,z375,z376,z377,z378,z379,z380,z381,z382,z383,z384,z385,z386,z387,z388,z389,z390,z391,z392,z393,z394,z395,z396,z397,z398,z399,z400,z401,z402,z403,z404,z405,z406,z407,z408,z409,z410,z411,z412,z413,z414,z415,z416,z417,z418,z419,z420,z421,z422,z423,z424,z425,z426,z427,z428,z429,z430,z431,z432,z433,z434,z435,z436,z437,z438,z439,z440,z441,z442,z443,z444,z445,z446,z447,z448,z449,z450,z451,z452,z453,z454,z455,z456,z457,z458,z459,z460,z461,z462,z463,z464,z465,z466,z467,z468,z469,z470,z471,z472,z473,z474,z475,z476,z477,z478,z479,z480,z481,z482,z483,z484,z485,z486,z487,z488,z489,z490,z491,z492,z493,z494,z495,z496,z497,z498,z499,z500,z501,z502,z503,z504,z505,z506,z507,z508,z509,z510,z511,z512,z513,z514,z515,z516,z517,z518,z519,z520,z521,z522,z523,z524,z525,z526,z527,z528,z529,z530,z531,z532,z533,z534,z535,z536,z537,z538,z539,z540,z541,z542,z543,z544,z545,z546,z547,z548,z549,z550,z551,z552,z553,z554,z555,z556,z557,z558,z559,z560,z561,z562,z563,z564,z565,z566,z567,z568,z569,z570,z571,z572,z573,z574,z575,z576,z577,z578,z579,z580,z581,z582,z583,z584,z585,z586,z587,z588,z589,z590,z591,z592,z593,z594,z595,z596,z597,z598,z599,z600,z601,z602,z603,z604,z605,z606,z607,z608,z609,z610,z611,z612,z613,z614,z615,z616,z617,z618,z619,z620,z621,z622,z623,z624,z625,z626,z627,z628,z629,z630,z631,z632,z633,z634,z635,z636,z637,z638,z639,z640,z641,z642,z643,z644,z645,z646,z647,z648,z649,z650,z651,z652,z653,z654,z655,z656,z657,z658,z659,z660,z661,z662,z663,z664,z665,z666,z667,z668,z669,z670,z671,z672,z673,z674,z675,z676,z677,z678,z679,z680,z681,z682,z683,z684,z685,z686,z687,z688,z689,z690,z691,z692,z693,z694,z695,z696,z697,z698,z699,z700,z701,z702,z703,z704,z705,z706,z707,z708,z709,z710,z711,z712,z713,z714,z715,z716,z717,z718,z719,z720,z721,z722,z723,z724,z725,z726,z727,z728,z729,z730,z731,z732,z733,z734,z735,z736,z737,z738,z739,z740,z741,z742,z743,z744,z745,z746,z747,z748,z749,z750,z751,z752,z753,z754,z755,z756,z757,z758,z759,z760,z761,z762,z763,z764,z765,z766,z767,z768,z769,z770,z771,z772,z773,z774,z775,z776,z777,z778,z779,z780,z781,z782,z783,z784,z785,z786,z787,z788,z789,z790,z791,z792,z793,z794,z795,z796,z797,z798,z799,z800,z801,z802,z803,z804,z805,z806,z807,z808,z809,z810,z811,z812,z813,z814,z815,z816,z817,z818,z819,z820,z821,z822,z823,z824,z825,z826,z827,z828,z829,z830,z831,z832,z833,z834,z835,z836,z837,z838,z839,z840,z841,z842,z843,z844,z845,z846,z847,z848,z849,z850,z851,z852,z853,z854,z855,z856,z857,z858,z859,z860,z861,z862,z863,z864,z865,z866,z867,z868,z869,z870,z871,z872,z873,z874,z875,z876,z877,z878,z879,z880,z881,z882,z883,z884,z885,z886,z887,z888,z889,z890,z891,z892,z893,z894,z895,z896,z897,z898,z899,z900,z901,z902,z903,z904,z905,z906,z907,z908,z909,z910,z911,z912,z913,z914,z915,z916,z917,z918,z919,z920,z921,z922,z923,z924,z925,z926,z927,z928,z929,z930,z931,z932,z933,z934,z935,z936,z937,z938,z939,z940,z941,z942,z943,z944,z945,z946,z947,z948,z949,z950,z951,z952,z953,z954,z955,z956,z957,z958,z959,z960,z961,z962,z963,z964,z965,z966,z967,z968,z969,z970,z971,z972,z973,z974,z975,z976,z977,z978,z979,z980,z981,z982,z983,z984,z985,z986,z987,z988,z989,z990,z991,z992,z993,z994,z995,z996,z997,z998,z999,z1000,z1001,z1002,z1003,z1004,z1005,z1006,z1007,z1008,z1009,z1010,z1011,z1012,z1013,z1014,z1015,z1016,z1017,z1018,z1019,z1020,z1021,z1022,z1023,z1024,z1025,z1026,z1027,z1028,z1029,z1030,z1031,z1032,z1033,z1034,z1035,z1036,z1037,z1038,z1039,z1040,z1041,z1042,z1043,z1044,z1045,z1046,z1047,z1048,z1049,z1050,z1051,z1052,z1053,z1054,z1055,z1056,z1057,z1058,z1059,z1060,z1061,z1062,z1063,z1064,z1065,z1066,z1067,z1068,z1069,z1070,z1071,z1072,z1073,z1074,z1075,z1076,z1077,z1078,z1079,z1080,z1081,z1082,z1083,z1084,z1085,z1086,z1087,z1088,z1089,z1090,z1091,z1092,z1093,z1094,z1095,z1096,z1097,z1098,z1099,z1100,z1101,z1102,z1103,z1104,z1105,z1106,z1107,z1108,z1109,z1110,z1111,z1112,z1113,z1114,z1115,z1116,z1117,z1118,z1119,z1120,z1121,z1122,z1123,z1124,z1125,z1126,z1127,z1128,z1129,z1130,z1131,z1132,z1133,z1134,z1135,z1136,z1137,z1138,z1139,z1140,z1141,z1142,z1143,z1144,z1145,z1146,z1147,z1148,z1149,z1150,z1151,z1152,z1153,z1154,z1155,z1156,z1157,z1158,z1159,z1160,z1161,z1162,z1163,z1164,z1165,z1166,z1167,z1168,z1169,z1170,z1171,z1172,z1173,z1174,z1175,z1176,z1177,z1178,z1179,z1180,z1181,z1182,z1183,z1184,z1185,z1186,z1187,z1188,z1189,z1190,z1191,z1192,z1193,z1194,z1195,z1196,z1197,z1198,z1199,z1200'];
z1,z2,z3,z4,z5,z6,z7,z8,z9,z10,z11,z12,z13,z14,z15,z16,z17,z18,z19,z20,z21,z22,z23,z24,z25,z26,z27,z28,z29,z30,z31,y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90,c91,c92,c93,c94,c95,c96,c97,c98,c99,c100,c101,c102,c103,c104,c105,c106,c107,c108,c109,c110,c111,c112,c113,c114,c115,c116,c117,c118,c119,c120,c121,c122,c123,c124,c125,c126,c127,c128,c129,c130,c131,c132,c133,c134,c135,c136,c137,c138,c139,c140,c141,c142,c143,c144,c145,c146,c147,c148,c149,c150,c151,c152,c153,c154,c155,c156,c157,c158,c159,c160,c161,c162,c163,c164,c165,c166,c167,c168,c169,c170,c171,c172,c173,c174,c175,c176,c177,c178,c179,c180,c181,c182,c183,c184,c185,c186,c187,c188,c189,c190,c191,c192,c193,c194,c195,c196,c197,c198,c199,c200,c201,c202,c203,c204,c205,c206,c207,c208,c209,c210,c211,c212,c213,c214,c215,c216,c217,c218,c219,c220,c221,c222,c223,c224,c225,c226,c227,c228,c229,c230,c231,c232,c233,c234,c235,c236,c237,c238,c239,c240,c241,c242,c243,c244,c245,c246,c247,c248,c249,c250,c251,c252,c253,c254,c255,c256,c257,c258,c259,c260,c261,c262,c263,c264,c265,c266,c267,c268,c269,c270,c271,c272,c273,c274,c275,c276,c277,c278,c279,c280,c281,c282,c283,c284,c285,c286,c287,c288,c289,c290,c291,c292,c293,c294,c295,c296,c297,c298,c299,c300,c301,c302,c303,c304,c305,c306,c307,c308,c309,c310,c311,c312,c313,c314,c315,c316,c317,c318,c319,c320,c321,c322,c323,c324,c325,c326,c327,c328,c329,c330,c331,c332,c333,c334,c335,c336,c337,c338,c339,c340,c341,c342,c343,c344,c345,c346,c347,c348,c349,c350,c351,c352,c353,c354,c355,c356,c357,c358,c359,c360,c361,c362,c363,c364,c365,c366,c367,c368,c369,c370,c371,c372,c373,c374,c375,c376,c377,c378,c379,c380,c381,c382,c383,c384,c385,c386,c387,c388,c389,c390,c391,c392,c393,c394,c395,c396,c397,c398,c399,c400,c401,c402,c403,c404,c405,c406,c407,c408,c409,c410,c411,c412,c413,c414,c415,c416,c417,c418,c419,c420,c421,c422,c423,c424,c425,c426,c427,c428,c429,c430,c431,c432,c433,c434,c435,c436,c437,c438,c439,c440,c441,c442,c443,c444,c445,c446,c447,c448,c449,c450,c451,c452,c453,c454,c455,c456,c457,c458,c459,c460,c461,c462,c463,c464,c465,c466,c467,c468,c469,c470,c471,c472,c473,c474,c475,c476,c477,c478,c479,c480,c481,c482,c483,c484,c485,c486,c487,c488,c489,c490,c491,c492,c493,c494,c495,c496,c497,c498,c499,c500,c501,c502,c503,c504,c505,c506,c507,c508,c509,c510,c511,c512,c513,c514,c515,c516,c517,c518,c519,c520,c521,c522,c523,c524,c525,c526,c527,c528,c529,c530,c531,c532,c533,c534,c535,c536,c537,c538,c539,c540,c541,c542,c543,c544,c545,c546,c547,c548,c549,c550,c551,c552,c553,c554,c555,c556,c557,c558,c559,c560,c561,c562,c563,c564,c565,c566,c567,c568,c569,c570,c571,c572,c573,c574,c575,c576,c577,c578,c579,c580,c581,c582,c583,c584,c585,c586,c587,c588,c589,c590,c591,c592,c593,c594,c595,c596,c597,c598,c599,c600,c601,c602,c603,c604,c605,c606,c607,c608,c609,c610,c611,c612,c613,c614,c615,c616,c617,c618,c619,c620,c621,c622,c623,c624,c625,c626,c627,c628,c629,c630,c631,c632,c633,c634,c635,c636,c637,c638,c639,c640,c641,c642,c643,c644,c645,c646,c647,c648,c649,c650,c651,c652,c653,c654,c655,c656,c657,c658,c659,c660,c661,c662,c663,c664,c665,c666,c667,c668,c669,c670,c671,c672,c673,c674,c675,c676,c677,c678,c679,c680,c681,c682,c683,c684,c685,c686,c687,c688,c689,c690,c691,c692,c693,c694,c695,c696,c697,c698,c699,c700,c701,c702,c703,c704,c705,c706,c707,c708,c709,c710,c711,c712,c713,c714,c715,c716,c717,c718,c719,c720,c721,c722,c723,c724,c725,c726,c727,c728,c729,c730,c731,c732,c733,c734,c735,c736,c737,c738,c739,c740,c741,c742,c743,c744,c745,c746,c747,c748,c749,c750,c751,c752,c753,c754,c755,c756,c757,c758,c759,c760,c761,c762,c763,c764,c765,c766,c767,c768,c769,c770,c771,c772,c773,c774,c775,c776,c777,c778,c779,c780,c781,c782,c783,c784,c785,c786,c787,c788,c789,c790,c791,c792,c793,c794,c795,c796,c797,c798,c799,c800,c801,c802,c803,c804,c805,c806,c807,c808,c809,c810,c811,c812,c813,c814,c815,c816,c817,c818,c819,c820,c821,c822,c823,c824,c825,c826,c827,c828,c829,c830,c831,c832,c833,c834,c835,c836,c837,c838,c839,c840,c841,c842,c843,c844,c845,c846,c847,c848,c849,c850,c851,c852,c853,c854,c855,c856,c857,c858,c859,c860,c861,c862,c863,c864,c865,c866,c867,c868,c869,c870,c871,c872,c873,c874,c875,c876,c877,c878,c879,c880,c881,c882,c883,c884,c885,c886,c887,c888,c889,c890,c891,c892,c893,c894,c895,c896,c897,c898,c899,c900,c901,c902,c903,c904,c905,c906,c907,c908,c909,c910,c911,c912,c913,c914,c915,c916,c917,c918,c919,c920,c921,c922,c923,c924,c925,c926,c927,c928,c929,c930,c931,c932,c933,c934,c935,c936,c937,c938,c939,c940,c941,c942,c943,c944,c945,c946,c947,c948,c949,c950,c951,c952,c953,c954,c955,c956,c957,c958,c959,c960,c961,c962,c963,c964,c965,c966,c967,c968,c969,c970,c971,c972,c973,c974,c975,c976,c977,c978,c979,c980,c981,c982,c983,c984,c985,c986,c987,c988,c989,c990,c991,c992,c993,c994,c995,c996,c997,c998,c999,c1000,c1001,c1002,c1003,c1004,c1005,c1006,c1007,c1008,c1009,c1010,c1011,c1012,c1013,c1014,c1015,c1016,c1017,c1018,c1019,c1020,c1021,c1022,c1023,c1024,c1025,c1026,c1027,c1028,c1029,c1030,c1031,c1032,c1033,c1034,c1035,c1036,c1037,c1038,c1039,c1040,c1041,c1042,c1043,c1044,c1045,c1046,c1047,c1048,c1049,c1050,c1051,c1052,c1053,c1054,c1055,c1056,c1057,c1058,c1059,c1060,c1061,c1062,c1063,c1064,c1065,c1066,c1067,c1068,c1069,c1070,c1071,c1072,c1073,c1074,c1075,c1076,c1077,c1078,c1079,c1080,c1081,c1082,c1083,c1084,c1085,c1086,c1087,c1088,c1089,c1090,c1091,c1092,c1093,c1094,c1095,c1096,c1097,c1098,c1099,c1100,c1101,c1102,c1103,c1104,c1105,c1106,c1107,c1108,c1109,c1110,c1111,c1112,c1113,c1114,c1115,c1116,c1117,c1118,c1119,c1120,c1121,c1122,c1123,c1124,c1125,c1126,c1127,c1128,c1129,c1130,c1131,c1132,c1133,c1134,c1135,c1136,c1137,c1138,c1139,c1140,c1141,c1142,c1143,c1144,c1145,c1146,c1147,c1148,c1149,c1150,c1151,c1152,c1153,c1154,c1155,c1156,c1157,c1158,c1159,c1160,c1161,c1162,c1163,c1164,c1165,c1166,c1167,c1168,c1169,c1170,c1171,c1172,c1173,c1174,c1175,c1176,c1177,c1178,c1179,c1180,c1181,c1182,c1183,c1184,c1185,c1186,c1187,c1188,c1189,c1190,c1191,c1192,c1193,c1194,c1195,c1196,c1197,c1198,c1199,c1200,k1,k2,k3,k4,k5,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,v1,v2,v3,v4,v5,a0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,t33,t34,t35,t36,t37,t38,t39,t40,z32,z33,z34,z35,z36,z37,z38,z39,z40,z41,z42,z43,z44,z45,z46,z47,z48,z49,z50,z51,z52,z53,z54,z55,z56,z57,z58,z59,z60,z61,z62,z63,z64,z65,z66,z67,z68,z69,z70,z71,z72,z73,z74,z75,z76,z77,z78,z79,z80,z81,z82,z83,z84,z85,z86,z87,z88,z89,z90,z91,z92,z93,z94,z95,z96,z97,z98,z99,z100,z101,z102,z103,z104,z105,z106,z107,z108,z109,z110,z111,z112,z113,z114,z115,z116,z117,z118,z119,z120,z121,z122,z123,z124,z125,z126,z127,z128,z129,z130,z131,z132,z133,z134,z135,z136,z137,z138,z139,z140,z141,z142,z143,z144,z145,z146,z147,z148,z149,z150,z151,z152,z153,z154,z155,z156,z157,z158,z159,z160,z161,z162,z163,z164,z165,z166,z167,z168,z169,z170,z171,z172,z173,z174,z175,z176,z177,z178,z179,z180,z181,z182,z183,z184,z185,z186,z187,z188,z189,z190,z191,z192,z193,z194,z195,z196,z197,z198,z199,z200,z201,z202,z203,z204,z205,z206,z207,z208,z209,z210,z211,z212,z213,z214,z215,z216,z217,z218,z219,z220,z221,z222,z223,z224,z225,z226,z227,z228,z229,z230,z231,z232,z233,z234,z235,z236,z237,z238,z239,z240,z241,z242,z243,z244,z245,z246,z247,z248,z249,z250,z251,z252,z253,z254,z255,z256,z257,z258,z259,z260,z261,z262,z263,z264,z265,z266,z267,z268,z269,z270,z271,z272,z273,z274,z275,z276,z277,z278,z279,z280,z281,z282,z283,z284,z285,z286,z287,z288,z289,z290,z291,z292,z293,z294,z295,z296,z297,z298,z299,z300,z301,z302,z303,z304,z305,z306,z307,z308,z309,z310,z311,z312,z313,z314,z315,z316,z317,z318,z319,z320,z321,z322,z323,z324,z325,z326,z327,z328,z329,z330,z331,z332,z333,z334,z335,z336,z337,z338,z339,z340,z341,z342,z343,z344,z345,z346,z347,z348,z349,z350,z351,z352,z353,z354,z355,z356,z357,z358,z359,z360,z361,z362,z363,z364,z365,z366,z367,z368,z369,z370,z371,z372,z373,z374,z375,z376,z377,z378,z379,z380,z381,z382,z383,z384,z385,z386,z387,z388,z389,z390,z391,z392,z393,z394,z395,z396,z397,z398,z399,z400,z401,z402,z403,z404,z405,z406,z407,z408,z409,z410,z411,z412,z413,z414,z415,z416,z417,z418,z419,z420,z421,z422,z423,z424,z425,z426,z427,z428,z429,z430,z431,z432,z433,z434,z435,z436,z437,z438,z439,z440,z441,z442,z443,z444,z445,z446,z447,z448,z449,z450,z451,z452,z453,z454,z455,z456,z457,z458,z459,z460,z461,z462,z463,z464,z465,z466,z467,z468,z469,z470,z471,z472,z473,z474,z475,z476,z477,z478,z479,z480,z481,z482,z483,z484,z485,z486,z487,z488,z489,z490,z491,z492,z493,z494,z495,z496,z497,z498,z499,z500,z501,z502,z503,z504,z505,z506,z507,z508,z509,z510,z511,z512,z513,z514,z515,z516,z517,z518,z519,z520,z521,z522,z523,z524,z525,z526,z527,z528,z529,z530,z531,z532,z533,z534,z535,z536,z537,z538,z539,z540,z541,z542,z543,z544,z545,z546,z547,z548,z549,z550,z551,z552,z553,z554,z555,z556,z557,z558,z559,z560,z561,z562,z563,z564,z565,z566,z567,z568,z569,z570,z571,z572,z573,z574,z575,z576,z577,z578,z579,z580,z581,z582,z583,z584,z585,z586,z587,z588,z589,z590,z591,z592,z593,z594,z595,z596,z597,z598,z599,z600,z601,z602,z603,z604,z605,z606,z607,z608,z609,z610,z611,z612,z613,z614,z615,z616,z617,z618,z619,z620,z621,z622,z623,z624,z625,z626,z627,z628,z629,z630,z631,z632,z633,z634,z635,z636,z637,z638,z639,z640,z641,z642,z643,z644,z645,z646,z647,z648,z649,z650,z651,z652,z653,z654,z655,z656,z657,z658,z659,z660,z661,z662,z663,z664,z665,z666,z667,z668,z669,z670,z671,z672,z673,z674,z675,z676,z677,z678,z679,z680,z681,z682,z683,z684,z685,z686,z687,z688,z689,z690,z691,z692,z693,z694,z695,z696,z697,z698,z699,z700,z701,z702,z703,z704,z705,z706,z707,z708,z709,z710,z711,z712,z713,z714,z715,z716,z717,z718,z719,z720,z721,z722,z723,z724,z725,z726,z727,z728,z729,z730,z731,z732,z733,z734,z735,z736,z737,z738,z739,z740,z741,z742,z743,z744,z745,z746,z747,z748,z749,z750,z751,z752,z753,z754,z755,z756,z757,z758,z759,z760,z761,z762,z763,z764,z765,z766,z767,z768,z769,z770,z771,z772,z773,z774,z775,z776,z777,z778,z779,z780,z781,z782,z783,z784,z785,z786,z787,z788,z789,z790,z791,z792,z793,z794,z795,z796,z797,z798,z799,z800,z801,z802,z803,z804,z805,z806,z807,z808,z809,z810,z811,z812,z813,z814,z815,z816,z817,z818,z819,z820,z821,z822,z823,z824,z825,z826,z827,z828,z829,z830,z831,z832,z833,z834,z835,z836,z837,z838,z839,z840,z841,z842,z843,z844,z845,z846,z847,z848,z849,z850,z851,z852,z853,z854,z855,z856,z857,z858,z859,z860,z861,z862,z863,z864,z865,z866,z867,z868,z869,z870,z871,z872,z873,z874,z875,z876,z877,z878,z879,z880,z881,z882,z883,z884,z885,z886,z887,z888,z889,z890,z891,z892,z893,z894,z895,z896,z897,z898,z899,z900,z901,z902,z903,z904,z905,z906,z907,z908,z909,z910,z911,z912,z913,z914,z915,z916,z917,z918,z919,z920,z921,z922,z923,z924,z925,z926,z927,z928,z929,z930,z931,z932,z933,z934,z935,z936,z937,z938,z939,z940,z941,z942,z943,z944,z945,z946,z947,z948,z949,z950,z951,z952,z953,z954,z955,z956,z957,z958,z959,z960,z961,z962,z963,z964,z965,z966,z967,z968,z969,z970,z971,z972,z973,z974,z975,z976,z977,z978,z979,z980,z981,z982,z983,z984,z985,z986,z987,z988,z989,z990,z991,z992,z993,z994,z995,z996,z997,z998,z999,z1000,z1001,z1002,z1003,z1004,z1005,z1006,z1007,z1008,z1009,z1010,z1011,z1012,z1013,z1014,z1015,z1016,z1017,z1018,z1019,z1020,z1021,z1022,z1023,z1024,z1025,z1026,z1027,z1028,z1029,z1030,z1031,z1032,z1033,z1034,z1035,z1036,z1037,z1038,z1039,z1040,z1041,z1042,z1043,z1044,z1045,z1046,z1047,z1048,z1049,z1050,z1051,z1052,z1053,z1054,z1055,z1056,z1057,z1058,z1059,z1060,z1061,z1062,z1063,z1064,z1065,z1066,z1067,z1068,z1069,z1070,z1071,z1072,z1073,z1074,z1075,z1076,z1077,z1078,z1079,z1080,z1081,z1082,z1083,z1084,z1085,z1086,z1087,z1088,z1089,z1090,z1091,z1092,z1093,z1094,z1095,z1096,z1097,z1098,z1099,z1100,z1101,z1102,z1103,z1104,z1105,z1106,z1107,z1108,z1109,z1110,z1111,z1112,z1113,z1114,z1115,z1116,z1117,z1118,z1119,z1120,z1121,z1122,z1123,z1124,z1125,z1126,z1127,z1128,z1129,z1130,z1131,z1132,z1133,z1134,z1135,z1136,z1137,z1138,z1139,z1140,z1141,z1142,z1143,z1144,z1145,z1146,z1147,z1148,z1149,z1150,z1151,z1152,z1153,z1154,z1155,z1156,z1157,z1158,z1159,z1160,z1161,z1162,z1163,z1164,z1165,z1166,z1167,z1168,z1169,z1170,z1171,z1172,z1173,z1174,z1175,z1176,z1177,z1178,z1179,z1180,z1181,z1182,z1183,z1184,z1185,z1186,z1187,z1188,z1189,z1190,z1191,z1192,z1193,z1194,z1195,z1196,z1197,z1198,z1199,z1200 = RING.gens();

ITEMS_ALL = [z1,z2,z3,z4,z5,z6,z7,z8,z9,z10,z11,z12,z13,z14,z15,z16,z17,z18,z19,z20,z21,z22,z23,z24,z25,z26,z27,z28,z29,z30,z31,y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90,c91,c92,c93,c94,c95,c96,c97,c98,c99,c100,c101,c102,c103,c104,c105,c106,c107,c108,c109,c110,c111,c112,c113,c114,c115,c116,c117,c118,c119,c120,c121,c122,c123,c124,c125,c126,c127,c128,c129,c130,c131,c132,c133,c134,c135,c136,c137,c138,c139,c140,c141,c142,c143,c144,c145,c146,c147,c148,c149,c150,c151,c152,c153,c154,c155,c156,c157,c158,c159,c160,c161,c162,c163,c164,c165,c166,c167,c168,c169,c170,c171,c172,c173,c174,c175,c176,c177,c178,c179,c180,c181,c182,c183,c184,c185,c186,c187,c188,c189,c190,c191,c192,c193,c194,c195,c196,c197,c198,c199,c200,c201,c202,c203,c204,c205,c206,c207,c208,c209,c210,c211,c212,c213,c214,c215,c216,c217,c218,c219,c220,c221,c222,c223,c224,c225,c226,c227,c228,c229,c230,c231,c232,c233,c234,c235,c236,c237,c238,c239,c240,c241,c242,c243,c244,c245,c246,c247,c248,c249,c250,c251,c252,c253,c254,c255,c256,c257,c258,c259,c260,c261,c262,c263,c264,c265,c266,c267,c268,c269,c270,c271,c272,c273,c274,c275,c276,c277,c278,c279,c280,c281,c282,c283,c284,c285,c286,c287,c288,c289,c290,c291,c292,c293,c294,c295,c296,c297,c298,c299,c300,c301,c302,c303,c304,c305,c306,c307,c308,c309,c310,c311,c312,c313,c314,c315,c316,c317,c318,c319,c320,c321,c322,c323,c324,c325,c326,c327,c328,c329,c330,c331,c332,c333,c334,c335,c336,c337,c338,c339,c340,c341,c342,c343,c344,c345,c346,c347,c348,c349,c350,c351,c352,c353,c354,c355,c356,c357,c358,c359,c360,c361,c362,c363,c364,c365,c366,c367,c368,c369,c370,c371,c372,c373,c374,c375,c376,c377,c378,c379,c380,c381,c382,c383,c384,c385,c386,c387,c388,c389,c390,c391,c392,c393,c394,c395,c396,c397,c398,c399,c400,c401,c402,c403,c404,c405,c406,c407,c408,c409,c410,c411,c412,c413,c414,c415,c416,c417,c418,c419,c420,c421,c422,c423,c424,c425,c426,c427,c428,c429,c430,c431,c432,c433,c434,c435,c436,c437,c438,c439,c440,c441,c442,c443,c444,c445,c446,c447,c448,c449,c450,c451,c452,c453,c454,c455,c456,c457,c458,c459,c460,c461,c462,c463,c464,c465,c466,c467,c468,c469,c470,c471,c472,c473,c474,c475,c476,c477,c478,c479,c480,c481,c482,c483,c484,c485,c486,c487,c488,c489,c490,c491,c492,c493,c494,c495,c496,c497,c498,c499,c500,c501,c502,c503,c504,c505,c506,c507,c508,c509,c510,c511,c512,c513,c514,c515,c516,c517,c518,c519,c520,c521,c522,c523,c524,c525,c526,c527,c528,c529,c530,c531,c532,c533,c534,c535,c536,c537,c538,c539,c540,c541,c542,c543,c544,c545,c546,c547,c548,c549,c550,c551,c552,c553,c554,c555,c556,c557,c558,c559,c560,c561,c562,c563,c564,c565,c566,c567,c568,c569,c570,c571,c572,c573,c574,c575,c576,c577,c578,c579,c580,c581,c582,c583,c584,c585,c586,c587,c588,c589,c590,c591,c592,c593,c594,c595,c596,c597,c598,c599,c600,c601,c602,c603,c604,c605,c606,c607,c608,c609,c610,c611,c612,c613,c614,c615,c616,c617,c618,c619,c620,c621,c622,c623,c624,c625,c626,c627,c628,c629,c630,c631,c632,c633,c634,c635,c636,c637,c638,c639,c640,c641,c642,c643,c644,c645,c646,c647,c648,c649,c650,c651,c652,c653,c654,c655,c656,c657,c658,c659,c660,c661,c662,c663,c664,c665,c666,c667,c668,c669,c670,c671,c672,c673,c674,c675,c676,c677,c678,c679,c680,c681,c682,c683,c684,c685,c686,c687,c688,c689,c690,c691,c692,c693,c694,c695,c696,c697,c698,c699,c700,c701,c702,c703,c704,c705,c706,c707,c708,c709,c710,c711,c712,c713,c714,c715,c716,c717,c718,c719,c720,c721,c722,c723,c724,c725,c726,c727,c728,c729,c730,c731,c732,c733,c734,c735,c736,c737,c738,c739,c740,c741,c742,c743,c744,c745,c746,c747,c748,c749,c750,c751,c752,c753,c754,c755,c756,c757,c758,c759,c760,c761,c762,c763,c764,c765,c766,c767,c768,c769,c770,c771,c772,c773,c774,c775,c776,c777,c778,c779,c780,c781,c782,c783,c784,c785,c786,c787,c788,c789,c790,c791,c792,c793,c794,c795,c796,c797,c798,c799,c800,c801,c802,c803,c804,c805,c806,c807,c808,c809,c810,c811,c812,c813,c814,c815,c816,c817,c818,c819,c820,c821,c822,c823,c824,c825,c826,c827,c828,c829,c830,c831,c832,c833,c834,c835,c836,c837,c838,c839,c840,c841,c842,c843,c844,c845,c846,c847,c848,c849,c850,c851,c852,c853,c854,c855,c856,c857,c858,c859,c860,c861,c862,c863,c864,c865,c866,c867,c868,c869,c870,c871,c872,c873,c874,c875,c876,c877,c878,c879,c880,c881,c882,c883,c884,c885,c886,c887,c888,c889,c890,c891,c892,c893,c894,c895,c896,c897,c898,c899,c900,c901,c902,c903,c904,c905,c906,c907,c908,c909,c910,c911,c912,c913,c914,c915,c916,c917,c918,c919,c920,c921,c922,c923,c924,c925,c926,c927,c928,c929,c930,c931,c932,c933,c934,c935,c936,c937,c938,c939,c940,c941,c942,c943,c944,c945,c946,c947,c948,c949,c950,c951,c952,c953,c954,c955,c956,c957,c958,c959,c960,c961,c962,c963,c964,c965,c966,c967,c968,c969,c970,c971,c972,c973,c974,c975,c976,c977,c978,c979,c980,c981,c982,c983,c984,c985,c986,c987,c988,c989,c990,c991,c992,c993,c994,c995,c996,c997,c998,c999,c1000,c1001,c1002,c1003,c1004,c1005,c1006,c1007,c1008,c1009,c1010,c1011,c1012,c1013,c1014,c1015,c1016,c1017,c1018,c1019,c1020,c1021,c1022,c1023,c1024,c1025,c1026,c1027,c1028,c1029,c1030,c1031,c1032,c1033,c1034,c1035,c1036,c1037,c1038,c1039,c1040,c1041,c1042,c1043,c1044,c1045,c1046,c1047,c1048,c1049,c1050,c1051,c1052,c1053,c1054,c1055,c1056,c1057,c1058,c1059,c1060,c1061,c1062,c1063,c1064,c1065,c1066,c1067,c1068,c1069,c1070,c1071,c1072,c1073,c1074,c1075,c1076,c1077,c1078,c1079,c1080,c1081,c1082,c1083,c1084,c1085,c1086,c1087,c1088,c1089,c1090,c1091,c1092,c1093,c1094,c1095,c1096,c1097,c1098,c1099,c1100,c1101,c1102,c1103,c1104,c1105,c1106,c1107,c1108,c1109,c1110,c1111,c1112,c1113,c1114,c1115,c1116,c1117,c1118,c1119,c1120,c1121,c1122,c1123,c1124,c1125,c1126,c1127,c1128,c1129,c1130,c1131,c1132,c1133,c1134,c1135,c1136,c1137,c1138,c1139,c1140,c1141,c1142,c1143,c1144,c1145,c1146,c1147,c1148,c1149,c1150,c1151,c1152,c1153,c1154,c1155,c1156,c1157,c1158,c1159,c1160,c1161,c1162,c1163,c1164,c1165,c1166,c1167,c1168,c1169,c1170,c1171,c1172,c1173,c1174,c1175,c1176,c1177,c1178,c1179,c1180,c1181,c1182,c1183,c1184,c1185,c1186,c1187,c1188,c1189,c1190,c1191,c1192,c1193,c1194,c1195,c1196,c1197,c1198,c1199,c1200,k1,k2,k3,k4,k5,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,v1,v2,v3,v4,v5,a0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,t33,t34,t35,t36,t37,t38,t39,t40,z32,z33,z34,z35,z36,z37,z38,z39,z40,z41,z42,z43,z44,z45,z46,z47,z48,z49,z50,z51,z52,z53,z54,z55,z56,z57,z58,z59,z60,z61,z62,z63,z64,z65,z66,z67,z68,z69,z70,z71,z72,z73,z74,z75,z76,z77,z78,z79,z80,z81,z82,z83,z84,z85,z86,z87,z88,z89,z90,z91,z92,z93,z94,z95,z96,z97,z98,z99,z100,z101,z102,z103,z104,z105,z106,z107,z108,z109,z110,z111,z112,z113,z114,z115,z116,z117,z118,z119,z120,z121,z122,z123,z124,z125,z126,z127,z128,z129,z130,z131,z132,z133,z134,z135,z136,z137,z138,z139,z140,z141,z142,z143,z144,z145,z146,z147,z148,z149,z150,z151,z152,z153,z154,z155,z156,z157,z158,z159,z160,z161,z162,z163,z164,z165,z166,z167,z168,z169,z170,z171,z172,z173,z174,z175,z176,z177,z178,z179,z180,z181,z182,z183,z184,z185,z186,z187,z188,z189,z190,z191,z192,z193,z194,z195,z196,z197,z198,z199,z200,z201,z202,z203,z204,z205,z206,z207,z208,z209,z210,z211,z212,z213,z214,z215,z216,z217,z218,z219,z220,z221,z222,z223,z224,z225,z226,z227,z228,z229,z230,z231,z232,z233,z234,z235,z236,z237,z238,z239,z240,z241,z242,z243,z244,z245,z246,z247,z248,z249,z250,z251,z252,z253,z254,z255,z256,z257,z258,z259,z260,z261,z262,z263,z264,z265,z266,z267,z268,z269,z270,z271,z272,z273,z274,z275,z276,z277,z278,z279,z280,z281,z282,z283,z284,z285,z286,z287,z288,z289,z290,z291,z292,z293,z294,z295,z296,z297,z298,z299,z300,z301,z302,z303,z304,z305,z306,z307,z308,z309,z310,z311,z312,z313,z314,z315,z316,z317,z318,z319,z320,z321,z322,z323,z324,z325,z326,z327,z328,z329,z330,z331,z332,z333,z334,z335,z336,z337,z338,z339,z340,z341,z342,z343,z344,z345,z346,z347,z348,z349,z350,z351,z352,z353,z354,z355,z356,z357,z358,z359,z360,z361,z362,z363,z364,z365,z366,z367,z368,z369,z370,z371,z372,z373,z374,z375,z376,z377,z378,z379,z380,z381,z382,z383,z384,z385,z386,z387,z388,z389,z390,z391,z392,z393,z394,z395,z396,z397,z398,z399,z400,z401,z402,z403,z404,z405,z406,z407,z408,z409,z410,z411,z412,z413,z414,z415,z416,z417,z418,z419,z420,z421,z422,z423,z424,z425,z426,z427,z428,z429,z430,z431,z432,z433,z434,z435,z436,z437,z438,z439,z440,z441,z442,z443,z444,z445,z446,z447,z448,z449,z450,z451,z452,z453,z454,z455,z456,z457,z458,z459,z460,z461,z462,z463,z464,z465,z466,z467,z468,z469,z470,z471,z472,z473,z474,z475,z476,z477,z478,z479,z480,z481,z482,z483,z484,z485,z486,z487,z488,z489,z490,z491,z492,z493,z494,z495,z496,z497,z498,z499,z500,z501,z502,z503,z504,z505,z506,z507,z508,z509,z510,z511,z512,z513,z514,z515,z516,z517,z518,z519,z520,z521,z522,z523,z524,z525,z526,z527,z528,z529,z530,z531,z532,z533,z534,z535,z536,z537,z538,z539,z540,z541,z542,z543,z544,z545,z546,z547,z548,z549,z550,z551,z552,z553,z554,z555,z556,z557,z558,z559,z560,z561,z562,z563,z564,z565,z566,z567,z568,z569,z570,z571,z572,z573,z574,z575,z576,z577,z578,z579,z580,z581,z582,z583,z584,z585,z586,z587,z588,z589,z590,z591,z592,z593,z594,z595,z596,z597,z598,z599,z600,z601,z602,z603,z604,z605,z606,z607,z608,z609,z610,z611,z612,z613,z614,z615,z616,z617,z618,z619,z620,z621,z622,z623,z624,z625,z626,z627,z628,z629,z630,z631,z632,z633,z634,z635,z636,z637,z638,z639,z640,z641,z642,z643,z644,z645,z646,z647,z648,z649,z650,z651,z652,z653,z654,z655,z656,z657,z658,z659,z660,z661,z662,z663,z664,z665,z666,z667,z668,z669,z670,z671,z672,z673,z674,z675,z676,z677,z678,z679,z680,z681,z682,z683,z684,z685,z686,z687,z688,z689,z690,z691,z692,z693,z694,z695,z696,z697,z698,z699,z700,z701,z702,z703,z704,z705,z706,z707,z708,z709,z710,z711,z712,z713,z714,z715,z716,z717,z718,z719,z720,z721,z722,z723,z724,z725,z726,z727,z728,z729,z730,z731,z732,z733,z734,z735,z736,z737,z738,z739,z740,z741,z742,z743,z744,z745,z746,z747,z748,z749,z750,z751,z752,z753,z754,z755,z756,z757,z758,z759,z760,z761,z762,z763,z764,z765,z766,z767,z768,z769,z770,z771,z772,z773,z774,z775,z776,z777,z778,z779,z780,z781,z782,z783,z784,z785,z786,z787,z788,z789,z790,z791,z792,z793,z794,z795,z796,z797,z798,z799,z800,z801,z802,z803,z804,z805,z806,z807,z808,z809,z810,z811,z812,z813,z814,z815,z816,z817,z818,z819,z820,z821,z822,z823,z824,z825,z826,z827,z828,z829,z830,z831,z832,z833,z834,z835,z836,z837,z838,z839,z840,z841,z842,z843,z844,z845,z846,z847,z848,z849,z850,z851,z852,z853,z854,z855,z856,z857,z858,z859,z860,z861,z862,z863,z864,z865,z866,z867,z868,z869,z870,z871,z872,z873,z874,z875,z876,z877,z878,z879,z880,z881,z882,z883,z884,z885,z886,z887,z888,z889,z890,z891,z892,z893,z894,z895,z896,z897,z898,z899,z900,z901,z902,z903,z904,z905,z906,z907,z908,z909,z910,z911,z912,z913,z914,z915,z916,z917,z918,z919,z920,z921,z922,z923,z924,z925,z926,z927,z928,z929,z930,z931,z932,z933,z934,z935,z936,z937,z938,z939,z940,z941,z942,z943,z944,z945,z946,z947,z948,z949,z950,z951,z952,z953,z954,z955,z956,z957,z958,z959,z960,z961,z962,z963,z964,z965,z966,z967,z968,z969,z970,z971,z972,z973,z974,z975,z976,z977,z978,z979,z980,z981,z982,z983,z984,z985,z986,z987,z988,z989,z990,z991,z992,z993,z994,z995,z996,z997,z998,z999,z1000,z1001,z1002,z1003,z1004,z1005,z1006,z1007,z1008,z1009,z1010,z1011,z1012,z1013,z1014,z1015,z1016,z1017,z1018,z1019,z1020,z1021,z1022,z1023,z1024,z1025,z1026,z1027,z1028,z1029,z1030,z1031,z1032,z1033,z1034,z1035,z1036,z1037,z1038,z1039,z1040,z1041,z1042,z1043,z1044,z1045,z1046,z1047,z1048,z1049,z1050,z1051,z1052,z1053,z1054,z1055,z1056,z1057,z1058,z1059,z1060,z1061,z1062,z1063,z1064,z1065,z1066,z1067,z1068,z1069,z1070,z1071,z1072,z1073,z1074,z1075,z1076,z1077,z1078,z1079,z1080,z1081,z1082,z1083,z1084,z1085,z1086,z1087,z1088,z1089,z1090,z1091,z1092,z1093,z1094,z1095,z1096,z1097,z1098,z1099,z1100,z1101,z1102,z1103,z1104,z1105,z1106,z1107,z1108,z1109,z1110,z1111,z1112,z1113,z1114,z1115,z1116,z1117,z1118,z1119,z1120,z1121,z1122,z1123,z1124,z1125,z1126,z1127,z1128,z1129,z1130,z1131,z1132,z1133,z1134,z1135,z1136,z1137,z1138,z1139,z1140,z1141,z1142,z1143,z1144,z1145,z1146,z1147,z1148,z1149,z1150,z1151,z1152,z1153,z1154,z1155,z1156,z1157,z1158,z1159,z1160,z1161,z1162,z1163,z1164,z1165,z1166,z1167,z1168,z1169,z1170,z1171,z1172,z1173,z1174,z1175,z1176,z1177,z1178,z1179,z1180,z1181,z1182,z1183,z1184,z1185,z1186,z1187,z1188,z1189,z1190,z1191,z1192,z1193,z1194,z1195,z1196,z1197,z1198,z1199,z1200];
ITEMS_Y = [y1,y2,y3,y4,y5,y6,y7,y8,y9,y10];
ITEMS_Z = [z1,z2,z3,z4,z5,z6,z7,z8,z9,z10,z11,z12,z13,z14,z15,z16,z17,z18,z19,z20,z21,z22,z23,z24,z25,z26,z27,z28,z29,z30,z31,z32,z33,z34,z35,z36,z37,z38,z39,z40,z41,z42,z43,z44,z45,z46,z47,z48,z49,z50,z51,z52,z53,z54,z55,z56,z57,z58,z59,z60,z61,z62,z63,z64,z65,z66,z67,z68,z69,z70,z71,z72,z73,z74,z75,z76,z77,z78,z79,z80,z81,z82,z83,z84,z85,z86,z87,z88,z89,z90,z91,z92,z93,z94,z95,z96,z97,z98,z99,z100,z101,z102,z103,z104,z105,z106,z107,z108,z109,z110,z111,z112,z113,z114,z115,z116,z117,z118,z119,z120,z121,z122,z123,z124,z125,z126,z127,z128,z129,z130,z131,z132,z133,z134,z135,z136,z137,z138,z139,z140,z141,z142,z143,z144,z145,z146,z147,z148,z149,z150,z151,z152,z153,z154,z155,z156,z157,z158,z159,z160,z161,z162,z163,z164,z165,z166,z167,z168,z169,z170,z171,z172,z173,z174,z175,z176,z177,z178,z179,z180,z181,z182,z183,z184,z185,z186,z187,z188,z189,z190,z191,z192,z193,z194,z195,z196,z197,z198,z199,z200,z201,z202,z203,z204,z205,z206,z207,z208,z209,z210,z211,z212,z213,z214,z215,z216,z217,z218,z219,z220,z221,z222,z223,z224,z225,z226,z227,z228,z229,z230,z231,z232,z233,z234,z235,z236,z237,z238,z239,z240,z241,z242,z243,z244,z245,z246,z247,z248,z249,z250,z251,z252,z253,z254,z255,z256,z257,z258,z259,z260,z261,z262,z263,z264,z265,z266,z267,z268,z269,z270,z271,z272,z273,z274,z275,z276,z277,z278,z279,z280,z281,z282,z283,z284,z285,z286,z287,z288,z289,z290,z291,z292,z293,z294,z295,z296,z297,z298,z299,z300,z301,z302,z303,z304,z305,z306,z307,z308,z309,z310,z311,z312,z313,z314,z315,z316,z317,z318,z319,z320,z321,z322,z323,z324,z325,z326,z327,z328,z329,z330,z331,z332,z333,z334,z335,z336,z337,z338,z339,z340,z341,z342,z343,z344,z345,z346,z347,z348,z349,z350,z351,z352,z353,z354,z355,z356,z357,z358,z359,z360,z361,z362,z363,z364,z365,z366,z367,z368,z369,z370,z371,z372,z373,z374,z375,z376,z377,z378,z379,z380,z381,z382,z383,z384,z385,z386,z387,z388,z389,z390,z391,z392,z393,z394,z395,z396,z397,z398,z399,z400,z401,z402,z403,z404,z405,z406,z407,z408,z409,z410,z411,z412,z413,z414,z415,z416,z417,z418,z419,z420,z421,z422,z423,z424,z425,z426,z427,z428,z429,z430,z431,z432,z433,z434,z435,z436,z437,z438,z439,z440,z441,z442,z443,z444,z445,z446,z447,z448,z449,z450,z451,z452,z453,z454,z455,z456,z457,z458,z459,z460,z461,z462,z463,z464,z465,z466,z467,z468,z469,z470,z471,z472,z473,z474,z475,z476,z477,z478,z479,z480,z481,z482,z483,z484,z485,z486,z487,z488,z489,z490,z491,z492,z493,z494,z495,z496,z497,z498,z499,z500,z501,z502,z503,z504,z505,z506,z507,z508,z509,z510,z511,z512,z513,z514,z515,z516,z517,z518,z519,z520,z521,z522,z523,z524,z525,z526,z527,z528,z529,z530,z531,z532,z533,z534,z535,z536,z537,z538,z539,z540,z541,z542,z543,z544,z545,z546,z547,z548,z549,z550,z551,z552,z553,z554,z555,z556,z557,z558,z559,z560,z561,z562,z563,z564,z565,z566,z567,z568,z569,z570,z571,z572,z573,z574,z575,z576,z577,z578,z579,z580,z581,z582,z583,z584,z585,z586,z587,z588,z589,z590,z591,z592,z593,z594,z595,z596,z597,z598,z599,z600,z601,z602,z603,z604,z605,z606,z607,z608,z609,z610,z611,z612,z613,z614,z615,z616,z617,z618,z619,z620,z621,z622,z623,z624,z625,z626,z627,z628,z629,z630,z631,z632,z633,z634,z635,z636,z637,z638,z639,z640,z641,z642,z643,z644,z645,z646,z647,z648,z649,z650,z651,z652,z653,z654,z655,z656,z657,z658,z659,z660,z661,z662,z663,z664,z665,z666,z667,z668,z669,z670,z671,z672,z673,z674,z675,z676,z677,z678,z679,z680,z681,z682,z683,z684,z685,z686,z687,z688,z689,z690,z691,z692,z693,z694,z695,z696,z697,z698,z699,z700,z701,z702,z703,z704,z705,z706,z707,z708,z709,z710,z711,z712,z713,z714,z715,z716,z717,z718,z719,z720,z721,z722,z723,z724,z725,z726,z727,z728,z729,z730,z731,z732,z733,z734,z735,z736,z737,z738,z739,z740,z741,z742,z743,z744,z745,z746,z747,z748,z749,z750,z751,z752,z753,z754,z755,z756,z757,z758,z759,z760,z761,z762,z763,z764,z765,z766,z767,z768,z769,z770,z771,z772,z773,z774,z775,z776,z777,z778,z779,z780,z781,z782,z783,z784,z785,z786,z787,z788,z789,z790,z791,z792,z793,z794,z795,z796,z797,z798,z799,z800,z801,z802,z803,z804,z805,z806,z807,z808,z809,z810,z811,z812,z813,z814,z815,z816,z817,z818,z819,z820,z821,z822,z823,z824,z825,z826,z827,z828,z829,z830,z831,z832,z833,z834,z835,z836,z837,z838,z839,z840,z841,z842,z843,z844,z845,z846,z847,z848,z849,z850,z851,z852,z853,z854,z855,z856,z857,z858,z859,z860,z861,z862,z863,z864,z865,z866,z867,z868,z869,z870,z871,z872,z873,z874,z875,z876,z877,z878,z879,z880,z881,z882,z883,z884,z885,z886,z887,z888,z889,z890,z891,z892,z893,z894,z895,z896,z897,z898,z899,z900,z901,z902,z903,z904,z905,z906,z907,z908,z909,z910,z911,z912,z913,z914,z915,z916,z917,z918,z919,z920,z921,z922,z923,z924,z925,z926,z927,z928,z929,z930,z931,z932,z933,z934,z935,z936,z937,z938,z939,z940,z941,z942,z943,z944,z945,z946,z947,z948,z949,z950,z951,z952,z953,z954,z955,z956,z957,z958,z959,z960,z961,z962,z963,z964,z965,z966,z967,z968,z969,z970,z971,z972,z973,z974,z975,z976,z977,z978,z979,z980,z981,z982,z983,z984,z985,z986,z987,z988,z989,z990,z991,z992,z993,z994,z995,z996,z997,z998,z999,z1000,z1001,z1002,z1003,z1004,z1005,z1006,z1007,z1008,z1009,z1010,z1011,z1012,z1013,z1014,z1015,z1016,z1017,z1018,z1019,z1020,z1021,z1022,z1023,z1024,z1025,z1026,z1027,z1028,z1029,z1030,z1031,z1032,z1033,z1034,z1035,z1036,z1037,z1038,z1039,z1040,z1041,z1042,z1043,z1044,z1045,z1046,z1047,z1048,z1049,z1050,z1051,z1052,z1053,z1054,z1055,z1056,z1057,z1058,z1059,z1060,z1061,z1062,z1063,z1064,z1065,z1066,z1067,z1068,z1069,z1070,z1071,z1072,z1073,z1074,z1075,z1076,z1077,z1078,z1079,z1080,z1081,z1082,z1083,z1084,z1085,z1086,z1087,z1088,z1089,z1090,z1091,z1092,z1093,z1094,z1095,z1096,z1097,z1098,z1099,z1100,z1101,z1102,z1103,z1104,z1105,z1106,z1107,z1108,z1109,z1110,z1111,z1112,z1113,z1114,z1115,z1116,z1117,z1118,z1119,z1120,z1121,z1122,z1123,z1124,z1125,z1126,z1127,z1128,z1129,z1130,z1131,z1132,z1133,z1134,z1135,z1136,z1137,z1138,z1139,z1140,z1141,z1142,z1143,z1144,z1145,z1146,z1147,z1148,z1149,z1150,z1151,z1152,z1153,z1154,z1155,z1156,z1157,z1158,z1159,z1160,z1161,z1162,z1163,z1164,z1165,z1166,z1167,z1168,z1169,z1170,z1171,z1172,z1173,z1174,z1175,z1176,z1177,z1178,z1179,z1180,z1181,z1182,z1183,z1184,z1185,z1186,z1187,z1188,z1189,z1190,z1191,z1192,z1193,z1194,z1195,z1196,z1197,z1198,z1199,z1200];
ITEMS_K = [k1,k2,k3,k4,k5];
ITEMS_C = [c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90,c91,c92,c93,c94,c95,c96,c97,c98,c99,c100,c101,c102,c103,c104,c105,c106,c107,c108,c109,c110,c111,c112,c113,c114,c115,c116,c117,c118,c119,c120,c121,c122,c123,c124,c125,c126,c127,c128,c129,c130,c131,c132,c133,c134,c135,c136,c137,c138,c139,c140,c141,c142,c143,c144,c145,c146,c147,c148,c149,c150,c151,c152,c153,c154,c155,c156,c157,c158,c159,c160,c161,c162,c163,c164,c165,c166,c167,c168,c169,c170,c171,c172,c173,c174,c175,c176,c177,c178,c179,c180,c181,c182,c183,c184,c185,c186,c187,c188,c189,c190,c191,c192,c193,c194,c195,c196,c197,c198,c199,c200,c201,c202,c203,c204,c205,c206,c207,c208,c209,c210,c211,c212,c213,c214,c215,c216,c217,c218,c219,c220,c221,c222,c223,c224,c225,c226,c227,c228,c229,c230,c231,c232,c233,c234,c235,c236,c237,c238,c239,c240,c241,c242,c243,c244,c245,c246,c247,c248,c249,c250,c251,c252,c253,c254,c255,c256,c257,c258,c259,c260,c261,c262,c263,c264,c265,c266,c267,c268,c269,c270,c271,c272,c273,c274,c275,c276,c277,c278,c279,c280,c281,c282,c283,c284,c285,c286,c287,c288,c289,c290,c291,c292,c293,c294,c295,c296,c297,c298,c299,c300,c301,c302,c303,c304,c305,c306,c307,c308,c309,c310,c311,c312,c313,c314,c315,c316,c317,c318,c319,c320,c321,c322,c323,c324,c325,c326,c327,c328,c329,c330,c331,c332,c333,c334,c335,c336,c337,c338,c339,c340,c341,c342,c343,c344,c345,c346,c347,c348,c349,c350,c351,c352,c353,c354,c355,c356,c357,c358,c359,c360,c361,c362,c363,c364,c365,c366,c367,c368,c369,c370,c371,c372,c373,c374,c375,c376,c377,c378,c379,c380,c381,c382,c383,c384,c385,c386,c387,c388,c389,c390,c391,c392,c393,c394,c395,c396,c397,c398,c399,c400,c401,c402,c403,c404,c405,c406,c407,c408,c409,c410,c411,c412,c413,c414,c415,c416,c417,c418,c419,c420,c421,c422,c423,c424,c425,c426,c427,c428,c429,c430,c431,c432,c433,c434,c435,c436,c437,c438,c439,c440,c441,c442,c443,c444,c445,c446,c447,c448,c449,c450,c451,c452,c453,c454,c455,c456,c457,c458,c459,c460,c461,c462,c463,c464,c465,c466,c467,c468,c469,c470,c471,c472,c473,c474,c475,c476,c477,c478,c479,c480,c481,c482,c483,c484,c485,c486,c487,c488,c489,c490,c491,c492,c493,c494,c495,c496,c497,c498,c499,c500,c501,c502,c503,c504,c505,c506,c507,c508,c509,c510,c511,c512,c513,c514,c515,c516,c517,c518,c519,c520,c521,c522,c523,c524,c525,c526,c527,c528,c529,c530,c531,c532,c533,c534,c535,c536,c537,c538,c539,c540,c541,c542,c543,c544,c545,c546,c547,c548,c549,c550,c551,c552,c553,c554,c555,c556,c557,c558,c559,c560,c561,c562,c563,c564,c565,c566,c567,c568,c569,c570,c571,c572,c573,c574,c575,c576,c577,c578,c579,c580,c581,c582,c583,c584,c585,c586,c587,c588,c589,c590,c591,c592,c593,c594,c595,c596,c597,c598,c599,c600,c601,c602,c603,c604,c605,c606,c607,c608,c609,c610,c611,c612,c613,c614,c615,c616,c617,c618,c619,c620,c621,c622,c623,c624,c625,c626,c627,c628,c629,c630,c631,c632,c633,c634,c635,c636,c637,c638,c639,c640,c641,c642,c643,c644,c645,c646,c647,c648,c649,c650,c651,c652,c653,c654,c655,c656,c657,c658,c659,c660,c661,c662,c663,c664,c665,c666,c667,c668,c669,c670,c671,c672,c673,c674,c675,c676,c677,c678,c679,c680,c681,c682,c683,c684,c685,c686,c687,c688,c689,c690,c691,c692,c693,c694,c695,c696,c697,c698,c699,c700,c701,c702,c703,c704,c705,c706,c707,c708,c709,c710,c711,c712,c713,c714,c715,c716,c717,c718,c719,c720,c721,c722,c723,c724,c725,c726,c727,c728,c729,c730,c731,c732,c733,c734,c735,c736,c737,c738,c739,c740,c741,c742,c743,c744,c745,c746,c747,c748,c749,c750,c751,c752,c753,c754,c755,c756,c757,c758,c759,c760,c761,c762,c763,c764,c765,c766,c767,c768,c769,c770,c771,c772,c773,c774,c775,c776,c777,c778,c779,c780,c781,c782,c783,c784,c785,c786,c787,c788,c789,c790,c791,c792,c793,c794,c795,c796,c797,c798,c799,c800,c801,c802,c803,c804,c805,c806,c807,c808,c809,c810,c811,c812,c813,c814,c815,c816,c817,c818,c819,c820,c821,c822,c823,c824,c825,c826,c827,c828,c829,c830,c831,c832,c833,c834,c835,c836,c837,c838,c839,c840,c841,c842,c843,c844,c845,c846,c847,c848,c849,c850,c851,c852,c853,c854,c855,c856,c857,c858,c859,c860,c861,c862,c863,c864,c865,c866,c867,c868,c869,c870,c871,c872,c873,c874,c875,c876,c877,c878,c879,c880,c881,c882,c883,c884,c885,c886,c887,c888,c889,c890,c891,c892,c893,c894,c895,c896,c897,c898,c899,c900,c901,c902,c903,c904,c905,c906,c907,c908,c909,c910,c911,c912,c913,c914,c915,c916,c917,c918,c919,c920,c921,c922,c923,c924,c925,c926,c927,c928,c929,c930,c931,c932,c933,c934,c935,c936,c937,c938,c939,c940,c941,c942,c943,c944,c945,c946,c947,c948,c949,c950,c951,c952,c953,c954,c955,c956,c957,c958,c959,c960,c961,c962,c963,c964,c965,c966,c967,c968,c969,c970,c971,c972,c973,c974,c975,c976,c977,c978,c979,c980,c981,c982,c983,c984,c985,c986,c987,c988,c989,c990,c991,c992,c993,c994,c995,c996,c997,c998,c999,c1000,c1001,c1002,c1003,c1004,c1005,c1006,c1007,c1008,c1009,c1010,c1011,c1012,c1013,c1014,c1015,c1016,c1017,c1018,c1019,c1020,c1021,c1022,c1023,c1024,c1025,c1026,c1027,c1028,c1029,c1030,c1031,c1032,c1033,c1034,c1035,c1036,c1037,c1038,c1039,c1040,c1041,c1042,c1043,c1044,c1045,c1046,c1047,c1048,c1049,c1050,c1051,c1052,c1053,c1054,c1055,c1056,c1057,c1058,c1059,c1060,c1061,c1062,c1063,c1064,c1065,c1066,c1067,c1068,c1069,c1070,c1071,c1072,c1073,c1074,c1075,c1076,c1077,c1078,c1079,c1080,c1081,c1082,c1083,c1084,c1085,c1086,c1087,c1088,c1089,c1090,c1091,c1092,c1093,c1094,c1095,c1096,c1097,c1098,c1099,c1100,c1101,c1102,c1103,c1104,c1105,c1106,c1107,c1108,c1109,c1110,c1111,c1112,c1113,c1114,c1115,c1116,c1117,c1118,c1119,c1120,c1121,c1122,c1123,c1124,c1125,c1126,c1127,c1128,c1129,c1130,c1131,c1132,c1133,c1134,c1135,c1136,c1137,c1138,c1139,c1140,c1141,c1142,c1143,c1144,c1145,c1146,c1147,c1148,c1149,c1150,c1151,c1152,c1153,c1154,c1155,c1156,c1157,c1158,c1159,c1160,c1161,c1162,c1163,c1164,c1165,c1166,c1167,c1168,c1169,c1170,c1171,c1172,c1173,c1174,c1175,c1176,c1177,c1178,c1179,c1180,c1181,c1182,c1183,c1184,c1185,c1186,c1187,c1188,c1189,c1190,c1191,c1192,c1193,c1194,c1195,c1196,c1197,c1198,c1199,c1200];
ITEMS_V = [v1,v2,v3,v4,v5];
ITEMS_X = [x1,x2,x3,x4,x5,x6,x7,x8,x9,x10];
ITEMS_T = [t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,t33,t34,t35,t36,t37,t38,t39,t40];
ITEMS_VK = ITEMS_V+ITEMS_K;


# ============================== 基本功能函数  ==================================

def print_coeffs_mat(COEFFS):
    print('---------------- COEFFS ------------------------------');
    for line in COEFFS:
        print(line);

def print_equations(EQUATIONS,NAME='EQUATIONS'):
    print('---------------- '+NAME+' ------------------------------');
    for line in EQUATIONS:
        print(line);

def print_dict(DICT_ZYX_2rd,NAME='DICT TYPE'):
    print('---------------- '+ NAME +' ------------------------------');
    for KEY in DICT_ZYX_2rd.keys():
        print( str(KEY) +' = '+ str(DICT_ZYX_2rd[KEY]) );        

def co_2_eq(COEFFS_,ITEMS_):
    EQUATIONS_ = [];
    for COEFF in COEFFS_:
        EQUATION = 0;
        if 1 not in COEFF:continue;
        for i in range(len(COEFF)):
            EQUATION += COEFF[i]*ITEMS_[i];
        EQUATIONS_.append(EQUATION);
    return EQUATIONS_;    

def cat_dict(DICT_ZZ16,DICT_ZReprZZ):
    DICT_NEW = {};
    for MONOMIAL_KEY in DICT_ZZ16.keys():DICT_NEW[MONOMIAL_KEY] = DICT_ZZ16[MONOMIAL_KEY];
    for MONOMIAL_KEY in DICT_ZReprZZ.keys():DICT_NEW[MONOMIAL_KEY] = DICT_ZReprZZ[MONOMIAL_KEY];
    return DICT_NEW;

def eq_2_co(EQUATIONS_,ITEMS_):
    COEFFS_ = [];
    VALI_ITEMS_COMPLETE = []
    for EQUATION in EQUATIONS_:
        COEFF = [];
        if EQUATION==0:
            COEFF = [int(0) for INDEX_i in range(len(ITEMS_))];
            COEFFS_.append(COEFF);
            continue;
        for ITEM in ITEMS_:
            if type(EQUATION)==sage.rings.fraction_field_element.FractionFieldElement:EQUATION=EQUATION.numerator();
            if (1,ITEM) in list(EQUATION):COEFF.append(int(1));continue;
            COEFF.append(int(0));
        VALI_ITEMS_COMPLETE.append( COEFF.count(1) == len(list(EQUATION)) );
        if not ( COEFF.count(1) == len(list(EQUATION)) ):    
            for MONOMIAL_TUR in list(EQUATION):
                if MONOMIAL_TUR[1] not in ITEMS_:
                    print(MONOMIAL_TUR[1]);
                    print(MONOMIAL);sys.exit(1); # ===========================================>!!!!!!!!!!!!!!!!!!!!!!!!!!
        COEFFS_.append(COEFF);
    return COEFFS_,VALI_ITEMS_COMPLETE; 

# ~~~~~~~~~~~~~~~~~~~~~~~~~~ C++ gaussian_elimination ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`
def cpp_gaussian_elimination(COEFFS,ITEMS):
    # ------------------------ step1:写入 -------------------------------
    os.system('rm coeff.mat');
    os.system('rm coeff_ge.mat');
    with open('coeff.mat','a') as FILEOUT:
        for COEFF in COEFFS:
            FILEOUT.write(str(COEFF).replace('[','').replace(']','').replace(',','').replace('SymmetricModularIntegerMod2(1)','1').replace('SymmetricModularIntegerMod2(0)','0'));     # 写入
            FILEOUT.write('\n');
    # ------------------------ step2:运行消元 -------------------------------
    os.system('./gaussian_elimination '+str(len(COEFFS))+' '+str(len(COEFFS[0])));
    print('./gaussian_elimination '+str(len(COEFFS))+' '+str(len(COEFFS[0])));
    # ------------------------ step3:回读 -------------------------------
    COEFFS = [];
    FILEIN = open('coeff_ge.mat');
    RES_DATA = FILEIN.readlines();
    for LINE in RES_DATA:
        LINE = LINE.split(' ')[0:-1];
        for i in range(len(LINE)):
            LINE[i] = int(LINE[i]);
        COEFFS.append(LINE);        
    # ----------------------- RETURN ----------------------------    
    EQUATIONS = 0;
    return COEFFS,EQUATIONS;

# ----------- DICT MADE ----------------------
def make_dict(COEFFS_GE,ITEMS_,DICT_O):
    COL_INDEX = len(COEFFS_GE)-1;
    while COL_INDEX >=0:
        if 1 not in COEFFS_GE[COL_INDEX]:COL_INDEX -=1;continue;
        FIRST_ONE_INDEX = COEFFS_GE[COL_INDEX].index(1);
        X_ITEM = ITEMS_[ FIRST_ONE_INDEX ];
        if X_ITEM in DICT_O.keys():COL_INDEX -=1;continue;
        DICT_O[X_ITEM] = 0;
        for EXPR_INDEX in range(FIRST_ONE_INDEX+1,len(COEFFS_GE[COL_INDEX])):
            if not COEFFS_GE[COL_INDEX][EXPR_INDEX]:continue;
            THIS_EXPR = ITEMS_[EXPR_INDEX];
            if THIS_EXPR in DICT_O.keys():THIS_EXPR = DICT_O[THIS_EXPR];
            DICT_O[X_ITEM] += THIS_EXPR;
        COL_INDEX -=1;
    return DICT_O;

def make_DICT_X0_2rd_SQR(DICT_X0_2rd):
    ITEMS_X0_2rd_SQR = [x10**2,x9**2,x8**2,x7**2,x6**2,x5**2,x4**2,x3**2,x2**2,x1**2];
    DICT_X0_2rd_SQR = {};
    for MONOMIAL_KEY in ITEMS_X0_2rd_SQR:
        DICT_X0_2rd_SQR[MONOMIAL_KEY] = DICT_X0_2rd[MONOMIAL_KEY];
    return DICT_X0_2rd_SQR;

def monomial_to_list(MONOMIAL):
    for MONOMIAL_DEGREE in MONOMIAL.dict().keys():MONOMIAL_DEGREE = list(MONOMIAL_DEGREE);
    return MONOMIAL_DEGREE;

def monomial_to_term(MONOMIAL):
    """
    MONOMIAL = (0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    TERM = k2*k3*k4*t1*t2;
    """
    TERM=1;
    for i in range(len(MONOMIAL)):
        if MONOMIAL[i]:TERM *= ITEMS_ALL[i]**MONOMIAL[i];
    return TERM;    

def monomials_of_poly(POLYNOMIAL):
    if POLYNOMIAL==0:return [0];
    MONOMIALS = [MONOMIAL_TUR[1] for MONOMIAL_TUR in list(POLYNOMIAL)];
    return MONOMIALS;

def is_factor(MONOMIAL_FAC,MONOMIAL):
    return (MONOMIAL).gcd(MONOMIAL_FAC) == MONOMIAL_FAC;

def descend_order(POLYNOMIAL):
    POLYNOMIAL_DE = 0;
    if type(POLYNOMIAL)==sage.rings.fraction_field_element.FractionFieldElement:POLYNOMIAL=POLYNOMIAL.numerator();
    for MONOMIAL_TUR in list(POLYNOMIAL):
        MONOMIAL = MONOMIAL_TUR[1];
        for MONOMIAL_DEGREE in MONOMIAL.dict().keys():MONOMIAL_DEGREE = list(MONOMIAL_DEGREE);
        # for i in range(0,74):
        #     if MONOMIAL_DEGREE[i]>1:MONOMIAL_DEGREE[i]=1;
        # for i in range(84,len(ITEMS_ALL)):
        #     if MONOMIAL_DEGREE[i]>1:MONOMIAL_DEGREE[i]=1;    
        for i in range(len(ITEMS_ALL)):
            if MONOMIAL_DEGREE[i]>1:MONOMIAL_DEGREE[i]=1;    
        POLYNOMIAL_DE += monomial_to_term(MONOMIAL_DEGREE);
    return POLYNOMIAL_DE;

def fact_subs(EQUATIONS_,DICT_O):
    EQUATIONS_RES = [];
    for POLYNOMIAL in EQUATIONS_:
        if type(POLYNOMIAL)==sage.rings.fraction_field_element.FractionFieldElement:POLYNOMIAL=POLYNOMIAL.numerator();
        #print(type(POLYNOMIAL));
        MONOMIALS = list(POLYNOMIAL);
        for MONOMIAL_TUR in MONOMIALS:
            if MONOMIAL_TUR==1:continue;
            MONOMIAL = MONOMIAL_TUR[1];
            for MONOMIAL_KEY in DICT_O.keys():
                if is_factor(MONOMIAL_KEY,MONOMIAL):MONOMIAL = (MONOMIAL/(MONOMIAL_KEY))*DICT_O[MONOMIAL_KEY];
            POLYNOMIAL = POLYNOMIAL - MONOMIAL_TUR[1] + MONOMIAL;
        EQUATIONS_RES.append(POLYNOMIAL);
    return EQUATIONS_RES;

def square_fact_subs(EQUATIONS_,DICT_O):
    EQUATIONS_RES = [];
    for POLYNOMIAL in EQUATIONS_:
        if type(POLYNOMIAL)==sage.rings.fraction_field_element.FractionFieldElement:POLYNOMIAL=POLYNOMIAL.numerator();
        #print(type(POLYNOMIAL));
        MONOMIALS = list(POLYNOMIAL);
        for MONOMIAL_TUR in MONOMIALS:
            if MONOMIAL_TUR==1:continue;
            MONOMIAL = MONOMIAL_TUR[1];
            for MONOMIAL_KEY in DICT_O.keys():
                if is_factor(MONOMIAL_KEY**2,MONOMIAL):MONOMIAL = (MONOMIAL/(MONOMIAL_KEY**2))*((DICT_O[MONOMIAL_KEY])**2);
                if is_factor(MONOMIAL_KEY,MONOMIAL):MONOMIAL = (MONOMIAL/(MONOMIAL_KEY))*DICT_O[MONOMIAL_KEY];
            POLYNOMIAL = POLYNOMIAL - MONOMIAL_TUR[1] + MONOMIAL;
        EQUATIONS_RES.append(POLYNOMIAL);
    return EQUATIONS_RES;    

def generate_mat_1_ncond(MAT):
    for i in range(len(MAT)):
        if sum(MAT[i][0:5])==5:
            return True;
    if int(abs(np.linalg.det(MAT)))!=1:return True;
    MAT_INV = ((abs(np.linalg.inv(MAT))).astype(int))%2;
    if int(abs(np.linalg.det(MAT_INV)))!=1:return True;
    return False;        

def generate_mat_1(DIM):
    MAT = np.identity(DIM);
    for i in range(150):
        if np.random.rand()>0.5:
            OPT_ROW = np.random.randint(50)%DIM;
            MAT[OPT_ROW] += MAT[(OPT_ROW+3)%DIM];
            MAT[OPT_ROW] = MAT[OPT_ROW]%2;
            continue;
        # OPT_COL = np.random.randint(50)%DIM;
        # MAT[:,OPT_COL] += MAT[:,(OPT_COL+3)%DIM];
        # MAT[:,OPT_COL] = MAT[:,OPT_COL]%2;    
    while generate_mat_1_ncond(MAT):    
        if np.random.rand()>0.5:
            OPT_ROW = np.random.randint(50)%DIM;
            MAT[OPT_ROW] += MAT[(OPT_ROW+3)%DIM];
            MAT[OPT_ROW] = MAT[OPT_ROW]%2;
            continue;
        # OPT_COL = np.random.randint(50)%DIM;
        # MAT[:,OPT_COL] += MAT[:,(OPT_COL+3)%DIM];
        # MAT[:,OPT_COL] = MAT[:,OPT_COL]%2;    
    return MAT.astype(int);

def make_TAB_VK_X_and_TAB_X_VK():
    TAB_VK_X,TAB_X_VK = {},{};
    #MAT = generate_mat_1(10);
    #MAT_INV = ((abs(np.linalg.inv(MAT))).astype(int))%2;
    #np.save('MAT_VK_X',np.array(MAT));
    #np.save('MAT_X_VK',np.array(MAT_INV));
    MAT = np.load('MAT_VK_X.npy');
    MAT_INV = np.load('MAT_X_VK.npy');
    print(np.dot(MAT,MAT_INV)%2);
    for i in range(len(ITEMS_VK)):
        POLY = 0;
        for j in range(len(ITEMS_X)):POLY += MAT[i][j]*ITEMS_X[j];
        TAB_VK_X[ITEMS_VK[i]] = POLY;
    for i in range(len(ITEMS_X)):
        POLY = 0;
        for j in range(len(ITEMS_VK)):POLY += MAT[i][j]*ITEMS_VK[j];
        TAB_X_VK[ITEMS_X[i]] = POLY;
    return TAB_VK_X,TAB_X_VK;

def make_TAB_YZ_ZZ(TAB_Z27):
    TAB_YZ_ZZ = {};
    # ----------- y_i*z_j ------------------
    for i in range(len(ITEMS_Y)):
        for j in range(len(ITEMS_Z)):
            if ITEMS_Z[j]*ITEMS_Y[i] in TAB_Z27.keys():continue;
            THIS_VALUE = descend_order(TAB_Z27[ITEMS_Z[j]]*ITEMS_Y[i]);
            for KEY in TAB_Z27.keys():
                if TAB_Z27[KEY] == THIS_VALUE:TAB_YZ_ZZ[ITEMS_Z[j]*ITEMS_Y[i]] = KEY;
    # ----------- z_i*z_j ------------------           
    for i in range(len(ITEMS_Z)):
        for j in range(len(ITEMS_Z)):
            if i>=j:continue;
            if ITEMS_Z[j]*ITEMS_Z[i] in TAB_Z27.keys():continue;
            THIS_VALUE = descend_order(TAB_Z27[ITEMS_Z[j]]*TAB_Z27[ITEMS_Z[i]]);
            for KEY in TAB_Z27.keys():
                if TAB_Z27[KEY] == THIS_VALUE:TAB_YZ_ZZ[ITEMS_Z[j]*ITEMS_Z[i]] = KEY;            
    return TAB_YZ_ZZ;            

def make_eq_ge(DICT_ZYX_2rd):
    EQUATIONS_110ZYX_GE = [];
    for KEY in DICT_ZYX_2rd.keys():
        EQUATIONS_110ZYX_GE.append(KEY + DICT_ZYX_2rd[KEY]);
    return EQUATIONS_110ZYX_GE;

def make_rev_tab(TAB_Z27):
    TAB_Z27_REV = {};
    for KEY in TAB_Z27.keys():
        TAB_Z27_REV[ TAB_Z27[KEY] ] = KEY;
    return TAB_Z27_REV;    

def add_CoLiDo(TERMS_TO_SUBS,KEY):
    TERMS_TO_SUBS_COPY = TERMS_TO_SUBS;
    for TERM in TERMS_TO_SUBS_COPY:
        if is_factor(KEY,TERM):
            return TERMS_TO_SUBS;
    for TERM in TERMS_TO_SUBS_COPY:
        if is_factor(TERM,KEY):
            del(TERMS_TO_SUBS[ TERMS_TO_SUBS.index(TERM) ]);
    TERMS_TO_SUBS.append(KEY);
    return TERMS_TO_SUBS;        

def order_div_CoLiDo(MONOMIAL_FAC,MONOMIAL):
    ORDER = 1;
    MONOMIAL = MONOMIAL/MONOMIAL_FAC;
    while is_factor(MONOMIAL_FAC,MONOMIAL):
        ORDER+=1;
        MONOMIAL = MONOMIAL/MONOMIAL_FAC;
    return ORDER;    

def subs_CoLiDo(POLYNOMIAL,TAB_YZ_K):
    POLYNOMIAL_SUBS = 0;
    for MONOMIAL in POLYNOMIAL.listmonoms():
        THIS_TERM = monomial_to_term(MONOMIAL);
        TERMS_TO_SUBS = [];
        for KEY in TAB_YZ_K.keys():
            MONOMIAL_KEY = KEY.listmonoms()[0];
            if is_factor(KEY,THIS_TERM):
                TERMS_TO_SUBS = add_CoLiDo(TERMS_TO_SUBS,KEY);
        if TERMS_TO_SUBS==[]:POLYNOMIAL_SUBS+=THIS_TERM;continue;
        TIMES_KEYS = 1;TIMES_VALUES=1;
        for i in range(len(TERMS_TO_SUBS)):
            ORDER = order_div_CoLiDo(TERMS_TO_SUBS[i],THIS_TERM);
            TIMES_KEYS *= TERMS_TO_SUBS[i]**ORDER;
            TIMES_VALUES *= TAB_YZ_K[TERMS_TO_SUBS[i]]**ORDER;
        POLYNOMIAL_SUBS += descend_order((THIS_TERM/TIMES_KEYS)*TIMES_VALUES);    
    return POLYNOMIAL_SUBS;    

def subs_PacA0(POLYNOMIAL,TAB_YZ_K):
    POLYNOMIAL_SUBS = 0;
    # if type(POLYNOMIAL)==list:print(POLYNOMIAL);
    for MONOMIAL in POLYNOMIAL.listmonoms():
        THIS_TERM = monomial_to_term(MONOMIAL);
        TERMS_TO_SUBS = [];
        for KEY in TAB_YZ_K.keys():
            MONOMIAL_KEY = KEY.listmonoms()[0];
            if is_factor(KEY,THIS_TERM): TERMS_TO_SUBS = add_CoLiDo(TERMS_TO_SUBS,KEY);
        if TERMS_TO_SUBS==[]:POLYNOMIAL_SUBS+=THIS_TERM;continue;
        TIMES_KEYS = 1;TIMES_VALUES=1;
        for i in range(len(TERMS_TO_SUBS)):
            ORDER = order_div_CoLiDo(TERMS_TO_SUBS[i],THIS_TERM);
            TIMES_KEYS *= TERMS_TO_SUBS[i]**ORDER;
            TIMES_VALUES *= TAB_YZ_K[TERMS_TO_SUBS[i]]**ORDER;
        POLYNOMIAL_SUBS += (THIS_TERM/TIMES_KEYS)*TIMES_VALUES;    
    return POLYNOMIAL_SUBS;    

def subs_MiChu(POLYNOMIAL,TAB_YZ_K):
    POLYNOMIAL_SUBS = 0;
    for MONOMIAL in POLYNOMIAL.listmonoms():
        THIS_TERM = monomial_to_term(MONOMIAL);
        TERMS_TO_SUBS = [];
        for KEY in TAB_YZ_K.keys():
            MONOMIAL_KEY = KEY.listmonoms()[0];
            if is_factor(KEY,THIS_TERM):
                TERMS_TO_SUBS = add_CoLiDo(TERMS_TO_SUBS,KEY);
        if TERMS_TO_SUBS==[]:POLYNOMIAL_SUBS+=THIS_TERM;continue;
        TIMES_KEYS = 1;TIMES_VALUES=1;
        for i in range(len(TERMS_TO_SUBS)):
            ORDER = order_div_CoLiDo(TERMS_TO_SUBS[i],THIS_TERM);
            TIMES_KEYS *= TERMS_TO_SUBS[i]**ORDER;
            TIMES_VALUES *= TAB_YZ_K[TERMS_TO_SUBS[i]]**ORDER;
        POLYNOMIAL_SUBS += (THIS_TERM/TIMES_KEYS)*TIMES_VALUES;    
    return POLYNOMIAL_SUBS;        

def subs_ADobePS6(EQUATIONS_110ZYX_GE,DICT_ZYX_2rd):
    for i in range(len(EQUATIONS_110ZYX_GE)):
        if type(EQUATIONS_110ZYX_GE[i])==sage.rings.fraction_field_element.FractionFieldElement:EQUATIONS_110ZYX_GE[i]=EQUATIONS_110ZYX_GE[i].numerator();
        MONOMIALS = EQUATIONS_110ZYX_GE[i].monomials();
        for MONOMIAL in MONOMIALS:
            if MONOMIAL in DICT_ZYX_2rd.keys():
                EQUATIONS_110ZYX_GE[i] = EQUATIONS_110ZYX_GE[i] - MONOMIAL + DICT_ZYX_2rd[MONOMIAL];
    return EQUATIONS_110ZYX_GE;

def x2v_maker(TAB_VBA):
    MAT_V2X = [];TAB_V2X={};
    MAT_X2V = [];TAB_X2V={};
    for i in range(len(ITEMS_X)):
        TAB_X2V[ITEMS_X[i]]=0;
        VEC = list(np.random.randint(2, size=len(ITEMS_V)));
        while (1 not in VEC) or (VEC in MAT_V2X):VEC = list(np.random.randint(2, size=len(ITEMS_V)));
        MAT_V2X.append(VEC);
        for j in range(len(ITEMS_V)):TAB_X2V[ITEMS_X[i]] += VEC[j]*ITEMS_V[j];
    for i in range(len(ITEMS_V)):
        TAB_V2X[ITEMS_V[i]]=0;
        VEC = list(np.random.randint(2, size=len(ITEMS_X)));
        VALUE_X2V = 0;
        TEST_TIME = 0;
        while VALUE_X2V!=TAB_VBA[ITEMS_V[i]] and TEST_TIME<3000:
            VEC = list(np.random.randint(2, size=len(ITEMS_X)));
            VALUE_X2V = 0;
            for j in range(len(ITEMS_X)):VALUE_X2V += VEC[j]*TAB_X2V[ITEMS_X[j]];
            TEST_TIME+=1;
        if TEST_TIME==3000:return None,None;
        MAT_X2V.append(VEC);
        for j in range(len(ITEMS_X)):TAB_V2X[ITEMS_V[i]] += VEC[j]*ITEMS_X[j];
    return TAB_V2X,TAB_X2V;        

def make_spoly(DICT_ird_X0):
    FIRST_TERMS = list(DICT_ird_X0.keys());
    S_POLYNOMIALS = [];
    for i in range(len(FIRST_TERMS)):
        for j in range(len(FIRST_TERMS)):
            if i>=j:continue;
            LCM_MONOMIAL = RING.monomial_lcm(FIRST_TERMS[i].LM,FIRST_TERMS[j].LM);
            if sum(LCM_MONOMIAL)-sum(FIRST_TERMS[i].LM)>1 or sum(LCM_MONOMIAL)-sum(FIRST_TERMS[j].LM)>1:
                continue;
            LCM_TERM = monomial_to_term(LCM_MONOMIAL);
            POLYNOMIAL_S1 = (LCM_TERM/FIRST_TERMS[i])*DICT_ird_X0[FIRST_TERMS[i]];
            POLYNOMIAL_S2 = (LCM_TERM/FIRST_TERMS[j])*DICT_ird_X0[FIRST_TERMS[j]];
            if POLYNOMIAL_S1-POLYNOMIAL_S2==0:continue;
            S_POLYNOMIALS.append(POLYNOMIAL_S1-POLYNOMIAL_S2);
    return S_POLYNOMIALS;       

def stat_right_items(ITEMS_BB,DICT_X0_2rd):
    for MONOMIAL_KEY in DICT_X0_2rd.keys():
        POLYNOMIAL = DICT_X0_2rd[MONOMIAL_KEY];
        for MONOMIAL in monomials_of_poly(POLYNOMIAL):
            if MONOMIAL not in ITEMS_BB:
                ITEMS_BB.append(MONOMIAL);
    return ITEMS_BB;

def tight_the_coeff(EQUATIONS_25_X0,ITEMS_X0_2rd):
    ITEMS_X0_2rd_TIT = [];
    for MONOMIAL_KEY in ITEMS_X0_2rd:
        for POLYNOMIAL in EQUATIONS_25_X0:
            if MONOMIAL_KEY in monomials_of_poly(POLYNOMIAL):
                ITEMS_X0_2rd_TIT.append(MONOMIAL_KEY);
    return ITEMS_X0_2rd_TIT;            

def merge_dict_preferentially(DICT_X0_2rd_SQR,DICT_X0_2rd):
    for MONOMIAL_KEY in DICT_X0_2rd.keys():
        if MONOMIAL_KEY in DICT_X0_2rd_SQR:
            DICT_X0_2rd[MONOMIAL_KEY] = DICT_X0_2rd_SQR[MONOMIAL_KEY];
    return DICT_X0_2rd;

def clean_0_eq(EQUATIONS):
    EQUATIONS_RES = [];
    for POLYNOMIAL in EQUATIONS:
        if POLYNOMIAL==0:continue;
        EQUATIONS_RES.append(POLYNOMIAL);    
    return EQUATIONS_RES;    

def subs_ADobePS6_DICT(DICT_X0_4rd,DICT_X0_2rd_SQR):    
    for MONOMIAL_KEY in DICT_X0_4rd.keys():
        MONOMIALS = monomials_of_poly(DICT_X0_4rd[MONOMIAL_KEY]);
        for MONOMIAL in MONOMIALS:
            if MONOMIAL in DICT_X0_2rd_SQR.keys():
                DICT_X0_4rd[MONOMIAL_KEY] = DICT_X0_4rd[MONOMIAL_KEY] - MONOMIAL + DICT_X0_2rd_SQR[MONOMIAL];
    return DICT_X0_4rd;

def is_bad_gaussian(COEFFS_X0_3rd_GE):
    for i in range(len(COEFFS_X0_3rd_GE)-1):
        if 1 not in COEFFS_X0_3rd_GE[i]:
            if 1 in COEFFS_X0_3rd_GE[i+1]:return True;
            continue;
        if 1 not in COEFFS_X0_3rd_GE[i+1]:continue;
        if COEFFS_X0_3rd_GE[i].index(1) >=COEFFS_X0_3rd_GE[i+1].index(1):
            return True;
    return False;

def make_many_cc(DICT_C):
    SET_DICT_CC = [];
    ITEMS_CC = [];
    for MONOMIAL_KEY in ITEMS_C:
        if MONOMIAL_KEY not in DICT_C.keys():ITEMS_CC.append(MONOMIAL_KEY);
    for i in range(len(ITEMS_CC)):SET_DICT_CC.append({});
    for i in range(len(ITEMS_CC)):
        for j in range(len(ITEMS_CC)):
            if i==j:SET_DICT_CC[i][ITEMS_CC[j]]=1;continue;
            SET_DICT_CC[i][ITEMS_CC[j]]=0;
    return SET_DICT_CC;        

def dict_to_eq(TAB_Z11):
    EQUATIONS = [];
    for MONOMIAL_KEY in TAB_Z11.keys():
        EQUATIONS.append(MONOMIAL_KEY + TAB_Z11[MONOMIAL_KEY]);
    return EQUATIONS;    

def make_MAT_K():
    MAT_K = [];
    while len(MAT_K)<16:
        COEFF = np.random.randint(0,2,size=5);
        while (list(COEFF) in MAT_K) or (1 not in list(COEFF)):
            COEFF = np.random.randint(0,2,size=5);        
        MAT_K.append(list(COEFF));
    np.save('MAT_K',np.array(MAT_K));        
    return list(MAT_K);        

def simplify_ZYX_MONOMIAL(MONOMIAL,ITEMS_ZYX_3rd,DICT_X0_2rd_SQR,DICT_ZZ_ZY,TAB_Z11_REV):
    if (MONOMIAL in ITEMS_ZYX_3rd and MONOMIAL not in DICT_ZZ_ZY.keys()) or (MONOMIAL==0):return MONOMIAL;
    POLYNOMIAL = subs_CoLiDo(MONOMIAL,DICT_ZZ_ZY);
    POLYNOMIAL = subs_CoLiDo(POLYNOMIAL,TAB_Z11_REV);
    POLYNOMIAL = subs_CoLiDo(POLYNOMIAL,DICT_X0_2rd_SQR);
    POLYNOMIAL = subs_ADobePS6([POLYNOMIAL],DICT_ZZ_ZY)[0];
    POLYNOMIAL = subs_ADobePS6([POLYNOMIAL],TAB_Z11_REV)[0];
    POLYNOMIAL = subs_ADobePS6([POLYNOMIAL],DICT_X0_2rd_SQR)[0];
    POLYNOMIAL_SUBS = 0;
    for MONOMIAL_TUR in POLYNOMIAL.monomials():
        POLYNOMIAL_SUBS += simplify_ZYX_MONOMIAL(MONOMIAL_TUR,ITEMS_ZYX_3rd,DICT_X0_2rd_SQR,DICT_ZZ_ZY,TAB_Z11_REV);
    return POLYNOMIAL_SUBS;    

def simplify_ZYX(POLYNOMIAL,ITEMS_ZYX_3rd,DICT_X0_2rd_SQR,DICT_ZZ_ZY,TAB_Z11_REV):
    POLYNOMIAL_SUBS = 0;
    for MONOMIAL in monomials_of_poly(POLYNOMIAL):
        POLYNOMIAL_SUBS += simplify_ZYX_MONOMIAL(MONOMIAL,ITEMS_ZYX_3rd,DICT_X0_2rd_SQR,DICT_ZZ_ZY,TAB_Z11_REV);
    return POLYNOMIAL_SUBS;

def clean_DICT_ZYX_2rd(DICT_ZYX_2rd,TAB_YZ_ZZ):
    ITEMS_NOT_FIRST = [];
    for MONOMIAL_KEY in DICT_ZYX_2rd.keys():
        for MONOMIAL in monomials_of_poly(DICT_ZYX_2rd[MONOMIAL_KEY]):
            if MONOMIAL in TAB_YZ_ZZ.keys():
                if TAB_YZ_ZZ[MONOMIAL] in DICT_ZYX_2rd.keys():
                    DICT_ZYX_2rd[MONOMIAL_KEY] = DICT_ZYX_2rd[MONOMIAL_KEY] - MONOMIAL + DICT_ZYX_2rd[TAB_YZ_ZZ[MONOMIAL]];
                    if MONOMIAL not in ITEMS_NOT_FIRST:ITEMS_NOT_FIRST.append(MONOMIAL);
                if TAB_YZ_ZZ[MONOMIAL] not in DICT_ZYX_2rd.keys():print('We got trouble');
    for MONOMIAL in ITEMS_NOT_FIRST:
        DICT_ZYX_2rd[MONOMIAL] = DICT_ZYX_2rd[TAB_YZ_ZZ[MONOMIAL]];           
    return DICT_ZYX_2rd;

def left_but_right_items(DICT_ZYX_2rd,ITEMS_ZYX_3rd):
    ITEMS_BB = [];
    for MONOMIAL_KEY in DICT_ZYX_2rd.keys():
        for MONOMIAL in monomials_of_poly(DICT_ZYX_2rd[MONOMIAL_KEY]):
            if (MONOMIAL in ITEMS_ZYX_3rd) and (MONOMIAL not in ITEMS_BB):
                ITEMS_BB.append(MONOMIAL);
    return ITEMS_BB;            

def jordan_subs(DICT_ZYX_2rd,DICT_SUBS):
    for MONOMIAL_KEY in DICT_ZYX_2rd.keys():
        for MONOMIAL in monomials_of_poly(DICT_ZYX_2rd[MONOMIAL_KEY]):
            if MONOMIAL in DICT_SUBS.keys():
                DICT_ZYX_2rd[MONOMIAL_KEY] = DICT_ZYX_2rd[MONOMIAL_KEY] - MONOMIAL + DICT_ZYX_2rd[ DICT_SUBS[MONOMIAL] ];
    for MONOMIAL in DICT_SUBS.keys():
        DICT_ZYX_2rd[MONOMIAL] = DICT_ZYX_2rd[ DICT_SUBS[MONOMIAL] ];
    return DICT_ZYX_2rd;

def has_high_order(MONOMIAL):
    MONOMIAL = monomial_to_list(MONOMIAL);
    return MONOMIAL.count(1)+MONOMIAL.count(0)<len(MONOMIAL);

def simplify_XXX_MONOMIAL(MONOMIAL,DICT_X0_2rd_SQR,ITEMS_X0_3rd):
    #if (MONOMIAL in ITEMS_X0_3rd) or (MONOMIAL==0):return MONOMIAL;
    if not has_high_order(MONOMIAL):return MONOMIAL;
    POLYNOMIAL = fact_subs([MONOMIAL],DICT_X0_2rd_SQR)[0];
    POLYNOMIAL = fact_subs([POLYNOMIAL],DICT_X0_2rd_SQR)[0];
    POLYNOMIAL = fact_subs([POLYNOMIAL],DICT_X0_2rd_SQR)[0];
    POLYNOMIAL_SUBS = 0;
    if type(POLYNOMIAL)==sage.rings.fraction_field_element.FractionFieldElement:POLYNOMIAL=POLYNOMIAL.numerator();
    for MONOMIAL_TUR in POLYNOMIAL.monomials():
        POLYNOMIAL_SUBS += simplify_XXX_MONOMIAL(MONOMIAL_TUR,DICT_X0_2rd_SQR,ITEMS_X0_3rd);
    return POLYNOMIAL_SUBS;    

def simplify_XXX(POLYNOMIAL,DICT_X0_2rd_SQR,ITEMS_X0_3rd):
    POLYNOMIAL_SUBS = 0;
    for MONOMIAL in monomials_of_poly(POLYNOMIAL):
        POLYNOMIAL_SUBS += simplify_XXX_MONOMIAL(MONOMIAL,DICT_X0_2rd_SQR,ITEMS_X0_3rd);
    return POLYNOMIAL_SUBS;

def make_adv_order(DICT_X0_2rd,ITEMS_Z):
    S_POLYNOMIALS_3rd = [];
    USING_Z = [];
    INDEX_KEY=0;INDEX_FAC=0;
    for MONOMIAL_KEY in DICT_X0_2rd.keys():
        INDEX_KEY+=1;
        for MONOMIAL_FAC in DICT_X0_2rd.keys():
            INDEX_FAC+=1;
            if INDEX_KEY>=INDEX_FAC:continue;
            MONOMIAL_TUR = MONOMIAL_KEY.gcd(MONOMIAL_FAC);
            if MONOMIAL_TUR not in ITEMS_Z:continue;
            POLYNOMIAL = (MONOMIAL_FAC/MONOMIAL_TUR)*DICT_X0_2rd[MONOMIAL_KEY] + (MONOMIAL_KEY/MONOMIAL_TUR)*DICT_X0_2rd[MONOMIAL_FAC];
            if POLYNOMIAL==0:continue;
            S_POLYNOMIALS_3rd.append(POLYNOMIAL);
            if MONOMIAL_TUR not in USING_Z:USING_Z.append(MONOMIAL_TUR);
    print(USING_Z);        
    return S_POLYNOMIALS_3rd;

# ------------------------ START: Final Subs func --------------------------------------------------
def _subs_by_dicts_mono(MONOMIAL,DICT_SET):
    if MONOMIAL==1 or MONOMIAL==0:return MONOMIAL;
    #print(MONOMIAL);
    OVER_SUBS = 1;
    POLYNOMIAL_SUBS=0;
    for DICT in DICT_SET:
        for MONOMIAL_KEY in DICT.keys():
            if is_factor(MONOMIAL_KEY,MONOMIAL):
                OVER_SUBS=0;
                POLYNOMIAL = (MONOMIAL/MONOMIAL_KEY)*DICT[MONOMIAL_KEY];
                if type(POLYNOMIAL)==sage.rings.fraction_field_element.FractionFieldElement:POLYNOMIAL=POLYNOMIAL.numerator();
                for MONOMIAL_TUR in POLYNOMIAL.monomials():POLYNOMIAL_SUBS += _subs_by_dicts_mono(MONOMIAL_TUR,DICT_SET);
                return POLYNOMIAL_SUBS;
    if OVER_SUBS==1:return MONOMIAL;

def subs_by_dicts(EQUATIONS,DICT_SET):
    if type(DICT_SET)!=list:DICT_SET = [DICT_SET];
    if type(EQUATIONS)!=list:EQUATIONS = [EQUATIONS];
    EQUATIONS_RES = [];
    for POLYNOMIAL in EQUATIONS:
        if type(POLYNOMIAL)==sage.rings.fraction_field_element.FractionFieldElement:POLYNOMIAL=POLYNOMIAL.numerator();
        EQUATIONS_RES.append(0);
        for MONOMIAL in POLYNOMIAL.monomials():
            EQUATIONS_RES[-1] += _subs_by_dicts_mono(MONOMIAL,DICT_SET);
    if len(EQUATIONS_RES)==1:return EQUATIONS_RES[0];
    return EQUATIONS_RES;
# ------------------------ OVER: Final Subs func --------------------------------------------------        

def _subs_by_dicts_once_mono(MONOMIAL,DICT_SET):
    if MONOMIAL==1 or MONOMIAL==0:return MONOMIAL;
    POLYNOMIAL_SUBS=0;
    for DICT in DICT_SET:
        # ------- 替换2次项 -----------
        for MONOMIAL_KEY in DICT.keys():
            if is_factor(MONOMIAL_KEY**2,MONOMIAL):
                POLYNOMIAL = (MONOMIAL/(MONOMIAL_KEY**2))*(DICT[MONOMIAL_KEY]**2);
                if type(POLYNOMIAL)==sage.rings.fraction_field_element.FractionFieldElement:POLYNOMIAL=POLYNOMIAL.numerator();
                POLYNOMIAL_SUBS += POLYNOMIAL;
                break;
        if  POLYNOMIAL_SUBS!=0:return POLYNOMIAL_SUBS;
        # ------- 替换交叉项 -----------     
        for MONOMIAL_KEY in DICT.keys():
            for MONOMIAL_FAC in DICT.keys():
                if MONOMIAL_KEY==MONOMIAL_FAC:continue;
                if is_factor(MONOMIAL_KEY*MONOMIAL_FAC,MONOMIAL):
                    #print((MONOMIAL_KEY*MONOMIAL_FAC,MONOMIAL));
                    POLYNOMIAL = DICT[MONOMIAL_KEY]*DICT[MONOMIAL_FAC];
                    if type(POLYNOMIAL)==sage.rings.fraction_field_element.FractionFieldElement:POLYNOMIAL=POLYNOMIAL.numerator();
                    return POLYNOMIAL;
        # ------- 替换single项 -----------
        for MONOMIAL_KEY in DICT.keys():
            if is_factor(MONOMIAL_KEY,MONOMIAL):
                POLYNOMIAL = (MONOMIAL/MONOMIAL_KEY)*DICT[MONOMIAL_KEY];
                if type(POLYNOMIAL)==sage.rings.fraction_field_element.FractionFieldElement:POLYNOMIAL=POLYNOMIAL.numerator();
                #for MONOMIAL_TUR in POLYNOMIAL.monomials():POLYNOMIAL_SUBS += _subs_by_dicts_mono(MONOMIAL_TUR,DICT_SET);
                POLYNOMIAL_SUBS += POLYNOMIAL;
        if POLYNOMIAL_SUBS==0:POLYNOMIAL_SUBS=MONOMIAL;
    return POLYNOMIAL_SUBS;

def subs_by_dicts_once(EQUATIONS,DICT_SET):
    if type(DICT_SET)!=list:DICT_SET = [DICT_SET];
    if type(EQUATIONS)!=list:EQUATIONS = [EQUATIONS];
    EQUATIONS_RES = [];
    INDEX_NOW=0;INDEX_TOT=len(EQUATIONS);
    for POLYNOMIAL in EQUATIONS:
        #INDEX_NOW+=1;print(float(INDEX_NOW)/INDEX_TOT);
        if type(POLYNOMIAL)==sage.rings.fraction_field_element.FractionFieldElement:POLYNOMIAL=POLYNOMIAL.numerator();
        EQUATIONS_RES.append(0);
        if type(POLYNOMIAL)==sage.rings.integer.Integer:continue;
        for MONOMIAL in POLYNOMIAL.monomials():
            POLYNOMIAL_SUBS =  _subs_by_dicts_once_mono(MONOMIAL,DICT_SET);
            EQUATIONS_RES[-1] += POLYNOMIAL_SUBS;
    if len(EQUATIONS_RES)==1:return EQUATIONS_RES[0];
    return EQUATIONS_RES;

def make_representation_y2t(SOLV_8I2O):
    REPR_Y2T = {};
    SOLV_128T = {};
    SOLV_128T_SET = [];
    ITEMS_T8 = [t1,t2,t3,t4,t5,t6,t7,t8,t9,t10];
    ITEMS_T32 = [t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,t33,t34,t35,t36,t37,t38,t39,t40,1];
    for i in range(len(ITEMS_Y)):
        COEFF = list(np.random.randint(2,size=len(ITEMS_T32)));
        REPR_Y2T[ITEMS_Y[i]] = ITEMS_T8[i];
        for j in range(len(COEFF)):
            REPR_Y2T[ITEMS_Y[i]] += ITEMS_T32[j]*COEFF[j];
    #print_dict(REPR_Y2T);exit();
    for i in range(len(SOLV_8I2O)):
        SOLV_128T_SET.append({});
        for j in range(len(ITEMS_T8)):SOLV_128T_SET[-1][ITEMS_T8[j]] = 0;
        for j in range(len(ITEMS_T32)):SOLV_128T_SET[-1][ITEMS_T32[j]] = np.random.randint(2);
        for j in range(len(ITEMS_Y)):
            SOLV_128T_SET[-1][ITEMS_T8[j]] = SOLV_8I2O[i][ITEMS_Y[j]] + REPR_Y2T[ITEMS_Y[j]].subs(SOLV_128T_SET[-1]);
    #print(SOLV_128T_SET);exit();
    # ------------ Validation ----------------
    SOLV_4I1O_VAL = [];
    for i in range(len(SOLV_128T_SET)):
        SOLV_4I1O_VAL.append({});
        for j in range(len(ITEMS_Y)):
            SOLV_4I1O_VAL[-1][ITEMS_Y[j]] = REPR_Y2T[ITEMS_Y[j]].subs(SOLV_128T_SET[i]);
    #print(SOLV_4I1O_VAL==SOLV_8I2O);exit();
    return REPR_Y2T,SOLV_128T_SET;

def give_comb_items(ITEMS_Y,COMB_NUM):
    RES_DATA = {};
    for COMB_NUM_THIS in range(1,COMB_NUM+1):
        RES_DATA_THIS = [];
        if COMB_NUM_THIS<=len(ITEMS_Y)/2:
            RES_DATA_THAT = itertools.combinations(ITEMS_Y, COMB_NUM_THIS);
            for MONOMIAL_TUR in RES_DATA_THAT:
                MONOMIAL_FAC = 1;
                for MONOMIAL in MONOMIAL_TUR:MONOMIAL_FAC *= MONOMIAL;
                RES_DATA_THIS.append(MONOMIAL_FAC);
        if COMB_NUM_THIS>len(ITEMS_Y)/2:
            if COMB_NUM-COMB_NUM_THIS in RES_DATA.keys():
                MONOMIAL_FAC = 1;
                for MONOMIAL in ITEMS_Y:MONOMIAL_FAC *= MONOMIAL;
                RES_DATA_THIS = [MONOMIAL_FAC/MONOMIAL for MONOMIAL in RES_DATA[COMB_NUM-COMB_NUM_THIS]];
            if COMB_NUM_THIS==COMB_NUM:
                MONOMIAL_FAC = 1;
                for MONOMIAL in ITEMS_Y:MONOMIAL_FAC *= MONOMIAL;
                RES_DATA_THIS = [MONOMIAL_FAC];
        RES_DATA[COMB_NUM_THIS] = RES_DATA_THIS;
    return RES_DATA;

def monomial_to_items(MONOMIAL):
    MONOMIAL_TUR = monomial_to_list(MONOMIAL);
    ITEMS_ = [];
    for INDEX_i in range(len(ITEMS_ALL)):
        if MONOMIAL_TUR[INDEX_i]:
            ITEMS_.append(ITEMS_ALL[INDEX_i]);
    return ITEMS_;        

def logic_not(THIS_VALUE):
    return (THIS_VALUE+1)%2;

def mq_coeff_2_poly(FILE_NAME,ITEMS_MQ):
    FILE_MQ = open(FILE_NAME, "r"); 
    ALL_LINEs = FILE_MQ.readlines();
    NUM_VAR = 0;
    # ---------------- read coeff_mat -----------------
    COEFFS_MQ = [];
    for STR_LINE in ALL_LINEs:
        if STR_LINE!='\n':
            COEFFS_MQ.append([int(NUM_VAR) for NUM_VAR in STR_LINE.replace(' ;','').replace('\n','').split(' ')]);
    # ---------------- make equations -----------------
    EQUATIONS_MQ = co_2_eq(COEFFS_MQ,ITEMS_MQ);
    return EQUATIONS_MQ;

def mq_solv_reading(FILE_NAME,ITEMS_VARS_USED):
    FILE_MQ = open(FILE_NAME, "r");
    ALL_LINEs = FILE_MQ.readlines();
    # ---------------- read coeff_mat -----------------
    COEFFS_MQ = [];
    for STR_LINE in ALL_LINEs:
        if STR_LINE!='\n':
            SOLV_MQ_LIST = [int(NUM_VAR) for NUM_VAR in STR_LINE.replace(' ;','').replace('\n','').split(' ')];
    SOLV_MQ = {};
    for INDEX_i in range(len(SOLV_MQ_LIST)):
        SOLV_MQ[ITEMS_VARS_USED[INDEX_i]] = SOLV_MQ_LIST[INDEX_i];
    return SOLV_MQ;

class Mq_Equations_Obj(object):
	"""Handling the mq equations;"""
	def __init__(self, EQUATIONS_MQ, ITEMS_MQ):
		super(Mq_Equations_Obj, self).__init__()
		self.EQUATIONS_MQ = EQUATIONS_MQ;
		self.ITEMS_MQ = ITEMS_MQ;

	def subs_part_solv(self, PART_SOLVE):
	    self.EQUATIONS_MQ = [EQUATION.subs(PART_SOLVE) for EQUATION in self.EQUATIONS_MQ];

	def get_current_coeff(self):
	    return eq_2_co(self.EQUATIONS_MQ,self.ITEMS_MQ)[0];
		

# ============================== STEP 1:reading and handling mq dataset ===================================
ITEMS_MQ = [];
MAX_USED_VARS = 16;
MAX_NUM_EQ = 32;
DATASET_SAMPLES_NUM = 3;
SAVED_PATH = "./mq_dat_n" + str(MAX_USED_VARS) + "_m" + str(MAX_NUM_EQ);

ITEMS_VARS_USED = ITEMS_T[0:MAX_USED_VARS];
for INDEX_i in range(len(ITEMS_VARS_USED)):
    for INDEX_j in range(len(ITEMS_VARS_USED)):
        if INDEX_i>=INDEX_j:continue;
        ITEMS_MQ.append(ITEMS_VARS_USED[INDEX_i] * ITEMS_VARS_USED[INDEX_j]);
# --------- make 2-rd dummy item --------------
DUMMY_2rd_TAB = {};
for INDEX_i in range(len(ITEMS_MQ)):DUMMY_2rd_TAB[ITEMS_MQ[INDEX_i]] = ITEMS_C[INDEX_i];

ITEMS_MQ = ITEMS_MQ + ITEMS_VARS_USED;

# for INDEX_eq in range(DATASET_SAMPLES_NUM):
#     print("reading EQUATION :"+str(INDEX_eq) + " --- " +str(DATASET_SAMPLES_NUM));
#     EQUATIONS_MQ = mq_coeff_2_poly(SAVED_PATH + "/mq_eqs_"+str(INDEX_eq)+".coeff",ITEMS_MQ + [1]);
#     SOLV_MQ = mq_solv_reading(SAVED_PATH + "/mq_eqs_"+str(INDEX_eq)+".solv",ITEMS_VARS_USED);
#     print_equations(EQUATIONS_MQ);
#     print_dict(SOLV_MQ);

# # ------------ vali ------------------
# for INDEX_eq in range(DATASET_SAMPLES_NUM):
#     print("reading EQUATION :"+str(INDEX_eq) + " --- " +str(DATASET_SAMPLES_NUM));
#     EQUATIONS_MQ = mq_coeff_2_poly(SAVED_PATH + "/mq_eqs_"+str(INDEX_eq)+".coeff",ITEMS_MQ + [1]);
#     SOLV_MQ = mq_solv_reading(SAVED_PATH + "/mq_eqs_"+str(INDEX_eq)+".solv",ITEMS_VARS_USED);
#     eqs_obj = Mq_Equations_Obj(EQUATIONS_MQ,ITEMS_MQ+[1]);
#     eqs_obj.subs_part_solv(SOLV_MQ);
#     print_equations(eqs_obj.EQUATIONS_MQ);

# ------------ functions test ------------------
# for INDEX_eq in range(DATASET_SAMPLES_NUM):
#     print("reading EQUATION :"+str(INDEX_eq) + " --- " +str(DATASET_SAMPLES_NUM));
#     EQUATIONS_MQ = mq_coeff_2_poly(SAVED_PATH + "/mq_eqs_"+str(INDEX_eq)+".coeff",ITEMS_MQ + [1]);
#     SOLV_MQ = mq_solv_reading(SAVED_PATH + "/mq_eqs_"+str(INDEX_eq)+".solv",ITEMS_VARS_USED);
#     eqs_obj = Mq_Equations_Obj(EQUATIONS_MQ,ITEMS_MQ+[1]);
#     eqs_obj.subs_part_solv({ITEMS_VARS_USED[0]:SOLV_MQ[ITEMS_VARS_USED[0]]});
#     print_coeffs_mat(eqs_obj.get_current_coeff());

# # ------------ dataset for model_vae ------------------
# DATASET_FOR_VAE = [];
# if len(ITEMS_MQ+[1])%2==1: ADD_ONE_ZERO = True;
# for INDEX_eq in range(DATASET_SAMPLES_NUM):
#     print("reading EQUATION :"+str(INDEX_eq) + " --- " +str(DATASET_SAMPLES_NUM));
#     EQUATIONS_MQ = mq_coeff_2_poly(SAVED_PATH + "/mq_eqs_"+str(INDEX_eq)+".coeff",ITEMS_MQ + [1]);
#     SOLV_MQ = mq_solv_reading(SAVED_PATH + "/mq_eqs_"+str(INDEX_eq)+".solv",ITEMS_VARS_USED);
#     eqs_obj = Mq_Equations_Obj(EQUATIONS_MQ,ITEMS_MQ+[1]);
#     for INDEX_i in range(len(ITEMS_VARS_USED)):
#         eqs_obj.subs_part_solv({ITEMS_VARS_USED[INDEX_i]:SOLV_MQ[ITEMS_VARS_USED[INDEX_i]]});
#         COEFFS = eqs_obj.get_current_coeff();
#         if ADD_ONE_ZERO:COEFFS = [COEFF + [0] for COEFF in COEFFS];
#         DATASET_FOR_VAE.append( COEFFS );
# DATASET_FOR_VAE = np.array(DATASET_FOR_VAE,dtype=float);
# print(DATASET_FOR_VAE.shape);
# np.save("DATASET_FOR_VAE", DATASET_FOR_VAE);

# ------------ pre-dataset for MODEL_ACT ------------------
DATASET_FOR_ACT_PRE = [];
if len(ITEMS_MQ+[1])%2==1: ADD_ONE_ZERO = True;
for INDEX_eq in range(DATASET_SAMPLES_NUM):
    print("reading EQUATION :"+str(INDEX_eq) + " --- " +str(DATASET_SAMPLES_NUM));
    EQUATIONS_MQ = mq_coeff_2_poly(SAVED_PATH + "/mq_eqs_"+str(INDEX_eq)+".coeff",ITEMS_MQ + [1]);
    SOLV_MQ = mq_solv_reading(SAVED_PATH + "/mq_eqs_"+str(INDEX_eq)+".solv",ITEMS_VARS_USED);
    eqs_obj = Mq_Equations_Obj(EQUATIONS_MQ,ITEMS_MQ+[1]);
    for INDEX_i in range(len(ITEMS_VARS_USED)):
        COEFFS_init = eqs_obj.get_current_coeff();
        eqs_obj.subs_part_solv({ITEMS_VARS_USED[INDEX_i]:SOLV_MQ[ITEMS_VARS_USED[INDEX_i]]});
        SOLV_ACT = [0]*len(ITEMS_VARS_USED);
        if SOLV_MQ[ITEMS_VARS_USED[INDEX_i]]==1:SOLV_ACT[INDEX_i] = 1;
        if SOLV_MQ[ITEMS_VARS_USED[INDEX_i]]==0:SOLV_ACT[INDEX_i] = -1;
        COEFFS_subs = eqs_obj.get_current_coeff();
        if ADD_ONE_ZERO:
            COEFFS_init = [COEFF + [0] for COEFF in COEFFS_init];
            COEFFS_subs = [COEFF + [0] for COEFF in COEFFS_subs];
        DATASET_FOR_ACT_PRE.append( [ np.array(SOLV_ACT,dtype=float), np.array(COEFFS_init,dtype=float), np.array(COEFFS_subs,dtype=float)] );
DATASET_FOR_ACT_PRE = np.array(DATASET_FOR_ACT_PRE);
print(DATASET_FOR_ACT_PRE.shape);
np.save("DATASET_FOR_ACT_PRE", DATASET_FOR_ACT_PRE);